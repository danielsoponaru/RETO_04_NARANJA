clientes_objetivo <- objetivos$objetivo2$obj
# Cargar librerías necesarias
library(recommenderlab)
library(rsparse)
library(Matrix)
library(dplyr)
# 1. Cargar datos
data <- readRDS("matriz.RDS")
objetivos <- readRDS("objetivos.RDS")
clientes_objetivo <- objetivos$objetivo2$obj
clientes_objetivo
### OBJETIVO 2, RETO 4 ###
#Instalar las librerías necesarias
if(!requireNamespace("recommenderlab", quietly = TRUE)) {
install.packages("recommenderlab")
}
if(!requireNamespace("rsparse", quietly = TRUE)) {
install.packages("rsparse")
}
if(!requireNamespace("Matrix", quietly = TRUE)) {
install.packages("Matrix")
}
if(!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(Matrix)
library(dplyr)
#1. Cargar datos
data<- readRDS("MatrizSuperReducida.RDS")
objetivos<- readRDS("objetivos.RDS")
clientes_objetivo<- objetivos$objetivo2$obj
productos<- readRDS("maestroestr.RDS")
#2. Examinar datos y tipos de columnas
str(data)
summary(data)
class(data)
dim(data)
str(clientes_objetivo)
summary(clientes_objetivo)
#3. Preparar la matriz
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
matriz_sparseB<- ifelse(matriz_sparse > 0, 1, 0)
matriz_sparse@x[matriz_sparse@x>=1]<- 1
matriz_sparse
#4. Entrenar modelo ALS
set.seed(7)
modelo_ALS<- WRMF$new(rank = 10L, lambda = 0.1, feedback = "implicit")
modelo_ALS$fit_transform(matriz_sparse)
#5. Obtener el índice (en que fila estan) de los clientes objetivo en la matriz
id_usuarios<- match(clientes_objetivo, rownames(matriz))
#6. Hacer predicciones de productos
predicciones<- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], k = 1)
productos_recomendados<- colnames(matriz)[predicciones]
#Resultado
resultado<- data.frame(cliente = clientes_objetivo,
producto_recomendado = productos_recomendados)
#Asignar el nombre del producto
resultado$producto_recomendado<- sub("^X", "", resultado$producto_recomendado)
resultado_final<- merge(resultado,
productos,
by.x = "producto_recomendado",
by.y = "cod_est",
all.x = TRUE)
resultado_final<- resultado_final[, c("cliente", "producto_recomendado", "descripcion")]
resultado_final
##### GUARDAR LOS RESULTADOS #####
write.csv(resultado_final, file = "Resultados/resultados_objetivo2.csv", row.names = FALSE)
################################################
scores_matrix <- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], type = "score")
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
matriz_sparseB<- ifelse(matriz_sparse > 0, 1, 0)
matriz_sparse@x[matriz_sparse@x>=1]<- 1
matriz_sparse
#4. Entrenar modelo ALS
set.seed(7)
modelo_ALS<- WRMF$new(rank = 10L, lambda = 0.1, feedback = "implicit")
modelo_ALS$fit_transform(matriz_sparse)
#5. Obtener el índice (en que fila estan) de los clientes objetivo en la matriz
id_usuarios<- match(clientes_objetivo, rownames(matriz))
#6. Hacer predicciones de productos
predicciones<- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], k = 1)
productos_recomendados<- colnames(matriz)[predicciones]
#Resultado
resultado<- data.frame(cliente = clientes_objetivo,
producto_recomendado = productos_recomendados)
#Asignar el nombre del producto
resultado$producto_recomendado<- sub("^X", "", resultado$producto_recomendado)
resultado_final<- merge(resultado,
productos,
by.x = "producto_recomendado",
by.y = "cod_est",
all.x = TRUE)
resultado_final<- resultado_final[, c("cliente", "producto_recomendado", "descripcion")]
resultado_final
saveRDS(modelo_ALS, "modelo_als.rds")
saveRDS(matriz_sparse, "matriz_sparse.rds")
saveRDS(clientes_objetivo, "clientes_objetivo.rds")
saveRDS(productos, "productos.rds")
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
# Cargar modelo y datos
modelo_ALS <- readRDS("modelo_als.rds")
matriz_sparse <- readRDS("matriz_sparse.rds")
clientes_objetivo <- readRDS("clientes_objetivo.rds")
productos <- readRDS("productos.rds")
#* Recomienda un producto al cliente
#* @param cliente_id ID del cliente
#* @get /recomendar
function(cliente_id) {
cliente_id <- as.character(cliente_id)
# Verificar si el cliente está en la lista
if (!(cliente_id %in% rownames(matriz_sparse))) {
return(list(error = "Cliente no encontrado en matriz"))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
# Obtener scores de todos los productos
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
library(plumber)
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
# Cargar modelo y datos
modelo_ALS <- readRDS("modelo_als.rds")
matriz_sparse <- readRDS("matriz_sparse.rds")
clientes_objetivo <- readRDS("clientes_objetivo.rds")
productos <- readRDS("productos.rds")
#* Recomienda un producto al cliente
#* @param cliente_id ID del cliente
#* @get /recomendar
function(cliente_id) {
cliente_id <- as.character(cliente_id)
# Verificar si el cliente está en la lista
if (!(cliente_id %in% rownames(matriz_sparse))) {
return(list(error = "Cliente no encontrado en matriz"))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
# Obtener scores de todos los productos
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
plumb(file='~/api/api.R')$run()
plumb(file='~/api/api.R')$run()
library(plumber)
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
# Cargar modelo y datos
modelo_ALS <- readRDS("modelo_als.rds")
matriz_sparse <- readRDS("matriz_sparse.rds")
clientes_objetivo <- readRDS("clientes_objetivo.rds")
productos <- readRDS("productos.rds")
#* Recomienda un producto al cliente
#* @param cliente_id ID del cliente
#* @get /recomendar
function(cliente_id) {
cliente_id <- as.character(cliente_id)
# Verificar si el cliente está en la lista
if (!(cliente_id %in% rownames(matriz_sparse))) {
return(list(error = "Cliente no encontrado en matriz"))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
# Obtener scores de todos los productos
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
