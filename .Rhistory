# ===========================================
rating_df <- train_data %>%
count(id_cliente_enc, cod_est, name = "rating") %>%
rename(user = id_cliente_enc,
item = cod_est) %>%
mutate(user = as.character(user),
item = as.character(item))
# ===========================================
# 🔵 6. De rating_df a matriz densa, luego a sparseMatrix
# ===========================================
# 6.1 Matriz densa user × item
rating_matrix <- rating_df %>%
pivot_wider(
names_from  = item,
values_from = rating,
values_fill = 0
)
# Convertir la columna user en rownames
rownames(rating_matrix) <- rating_matrix$user
rating_matrix <- as.matrix(rating_matrix[ , -1])
# 6.2 SparseMatrix
rating_matrix_sparse <- as(rating_matrix, "dgCMatrix")
# ===========================================
# 🔵 7. Preparar tripleta para recosystem
# ===========================================
rating_df_for_recosystem <- summary(rating_matrix_sparse) %>%
transmute(
user   = rownames(rating_matrix_sparse)[i],
item   = colnames(rating_matrix_sparse)[j],
rating = x
)
# Guardar en fichero sin cabecera ni rownames
train_file <- tempfile()
write.table(
rating_df_for_recosystem,
file      = train_file,
sep       = " ",
row.names = FALSE,
col.names = FALSE,
quote     = FALSE
)
# ===========================================
# 🔵 8. Entrenar ALS (WRMF) con recosystem
# ===========================================
reco <- Reco()
reco$train(
data_file(train_file),
opts = list(
dim     = 30,
niter   = 30,
costp_l2= 0.1,
costq_l2= 0.1,
verbose = TRUE
)
)
warnings()
# Librerías necesarias
library(data.table)
library(Matrix)
library(recosystem)
# 1. Cargar los datos
maestroestr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# 2. Clientes del Objetivo 4
clientes_obj4 <- objetivos[objetivo == 4, id_cli]
library(data.table)
library(Matrix)
library(recosystem)
# 1. Cargar los datos
maestroestr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# 2. Clientes del Objetivo 4
clientes_obj4 <- objetivos$objetivo4$obj
# 3. Identificar última compra de cada cliente del Objetivo 4
tickets_obj4 <- tickets_enc[id_cli %in% clientes_obj4]
library(data.table)
library(Matrix)
library(recosystem)
# 1. Cargar los datos
maestroestr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# 2. Clientes del Objetivo 4 (CORRECTO AHORA)
clientes_obj4 <- objetivos$objetivo4$obj
# 3. Identificar última compra de cada cliente del Objetivo 4
tickets_obj4 <- tickets_enc[id_cli %in% clientes_obj4]
maestrostr   <- readRDS("maestroestr.RDS")
objetivos    <- readRDS("objetivos.RDS")
tickets_enc  <- readRDS("tickets_enc.RDS")
maestrostr   <- readRDS("maestroestr.RDS")
objetivos    <- readRDS("objetivos.RDS")
tickets_enc  <- readRDS("tickets_enc.RDS")
obj4<-objetivos[[4]]$obj
maestrostr   <- readRDS("maestroestr.RDS")
objetivos    <- readRDS("objetivos.RDS")
tickets  <- readRDS("tickets_enc.RDS")
obj4<-objetivos[[4]]$obj
tickets_filtrados <- tickets[tickets$id_cliente_enc %in% obj4, ]
tickets_filtrados_agrupados<- tickets_filtrados%>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n())
tickets_filtrados <- tickets_filtrados %>%
mutate(fecha = ymd(dia))
library(dplyr)
library(lubridate)
tickets_filtrados_agrupados<- tickets_filtrados%>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n())
tickets_filtrados <- tickets_filtrados %>%
mutate(fecha = ymd(dia))
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
library(recosystem)
library(recommenderlab)
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# ——————————————————————————————————————
# Script ALS para Objetivo 4 (Eroski)
# ——————————————————————————————————————
# 0. Instalación (si no las tienes):
# install.packages(c("data.table", "Matrix", "recosystem"))
# 1. Librerías necesarias
library(data.table)
library(Matrix)
library(recosystem)
# 2. Cargar los datos
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets_enc <- readRDS("tickets_enc.RDS")      # Historial de tickets: id_ticket, id_cli, id_articulo, cantidad, fecha_compra
# 3. Extraer clientes del Objetivo 4
clientes_obj4 <- objetivos$objetivo4$obj       # Vector con IDs de cliente
# 4. Identificar la última compra de cada cliente del Objetivo 4
tickets_obj4  <- tickets_enc[id_cli %in% clientes_obj4]
source("C:/Users/danie/Desktop/MONDRAGON/RETO 04/RETO_04_NARANJA/objetivo 4.R", echo = TRUE)
# 1. Librerías necesarias
library(data.table)
library(Matrix)
library(recosystem)
# 2. Cargar los datos
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets_enc <- readRDS("tickets_enc.RDS")      # Historial de tickets
# 3. Revisar nombres de columnas y renombrar si hace falta
# Imprimir nombres para verificar:
print(names(tickets_enc))
# 4. Extraer clientes del Objetivo 4
clientes_obj4 <- objetivos$objetivo4$obj       # Vector con IDs de cliente
# 5. Identificar la última compra de cada cliente del Objetivo 4
tickets_obj4  <- tickets_enc[id_cli %in% clientes_obj4]
id_cli
# === CARGAR DATOS ===
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets_enc <- readRDS("tickets_enc.RDS")
clientes_objetivo <- objetivos$objetivo4$obj
# === OBTENER ÚLTIMA COMPRA DE LOS CLIENTES OBJETIVO ===
ultimas_compras <- tickets %>%
filter(id_cliente_enc %in% clientes_objetivo) %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
# === CARGAR DATOS ===
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets <- readRDS("tickets_enc.RDS")
clientes_objetivo <- objetivos$objetivo4$obj
# === OBTENER ÚLTIMA COMPRA DE LOS CLIENTES OBJETIVO ===
ultimas_compras <- tickets %>%
filter(id_cliente_enc %in% clientes_objetivo) %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
# === DATOS DE ENTRENAMIENTO: EXCLUIR ÚLTIMA COMPRA DE CADA CLIENTE OBJETIVO ===
tickets_train <- anti_join(tickets, ultimas_compras,
by = c("id_cliente_enc", "num_ticket", "cod_est"))
# === CREAR FACTORES PARA USUARIOS Y PRODUCTOS ===
user_f <- factor(tickets_train$id_cliente_enc)
item_f <- factor(tickets_train$cod_est)
# === GUARDAR LOS MAPEOS ORIGINALES ===
user_map <- data.frame(id_cliente_enc = levels(user_f), user_index = 1:length(levels(user_f)))
item_map <- data.frame(cod_est = levels(item_f), item_index = 1:length(levels(item_f)))
# === MATRIZ SPARSE BINARIA ===
X <- sparseMatrix(
i = as.integer(user_f),
j = as.integer(item_f),
x = rep(1, length(user_f)),
dims = c(length(levels(user_f)), length(levels(item_f)))
)
# === ENTRENAR MODELO WRMF ===
model <- WRMF$new(rank = 30, lambda = 0.1, alpha = 40)
model$fit(X)
# === INSTALAR Y CARGAR LIBRERÍAS ===
# install.packages("Matrix")
# remotes::install_github("dselivanov/rsparse")
library(dplyr)
library(Matrix)
library(rsparse)
# === ENTRENAR MODELO WRMF ===
model <- WRMF$new(rank = 30, lambda = 0.1, alpha = 40)
model$fit(X)
str(model)
model$fit(X)
model$fit_transform(X)
# === GENERAR RECOMENDACIONES PARA CADA CLIENTE OBJETIVO ===
recomendaciones <- lapply(clientes_objetivo, function(cliente) {
# Si cliente no aparece en train, saltar
if (!(cliente %in% levels(user_f))) return(NULL)
u_idx <- which(levels(user_f) == cliente)
# Obtener productos de su última compra (para excluir)
productos_excluir <- ultimas_compras %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
productos_excluir_idx <- which(levels(item_f) %in% productos_excluir)
# Predecir scores para todos los productos
scores <- model$predict(user_index = u_idx, item_index = 1:ncol(X))
# Excluir los productos que ya compró en la última compra
scores[productos_excluir_idx] <- -Inf
# Obtener mejor producto recomendado
best_item_idx <- which.max(scores)
cod_est_recomendado <- levels(item_f)[best_item_idx]
return(data.frame(cliente = cliente, cod_est = cod_est_recomendado))
})
str(X)
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets <- readRDS("tickets_enc.RDS")
clientes_objetivo <- objetivos$objetivo4$obj
# === OBTENER ÚLTIMA COMPRA DE LOS CLIENTES OBJETIVO ===
ultimas_compras <- tickets %>%
filter(id_cliente_enc %in% clientes_objetivo) %>%
group_by(id_cliente_enc) %>%
filter(dia == max(dia)) %>%
ungroup()
# === DATOS DE ENTRENAMIENTO: EXCLUIR ÚLTIMA COMPRA DE CADA CLIENTE OBJETIVO ===
tickets_train <- anti_join(tickets, ultimas_compras,
by = c("id_cliente_enc", "num_ticket", "cod_est"))
# === CREAR FACTORES PARA USUARIOS Y PRODUCTOS ===
user_f <- factor(tickets_train$id_cliente_enc)
item_f <- factor(tickets_train$cod_est)
# === GUARDAR LOS MAPEOS ORIGINALES ===
user_map <- data.frame(id_cliente_enc = levels(user_f), user_index = 1:length(levels(user_f)))
item_map <- data.frame(cod_est = levels(item_f), item_index = 1:length(levels(item_f)))
# === MATRIZ SPARSE BINARIA ===
X <- sparseMatrix(
i = as.integer(user_f),
j = as.integer(item_f),
x = rep(1, length(user_f)),
dims = c(length(levels(user_f)), length(levels(item_f)))
)
str(X)
# === ENTRENAR MODELO WRMF ===
model <- WRMF$new(rank = 30, lambda = 0.1, alpha = 40)
model$fit_transform(X)
# === GENERAR RECOMENDACIONES PARA CADA CLIENTE OBJETIVO ===
recomendaciones <- lapply(clientes_objetivo, function(cliente) {
# Si cliente no aparece en train, saltar
if (!(cliente %in% levels(user_f))) return(NULL)
u_idx <- which(levels(user_f) == cliente)
# Obtener productos de su última compra (para excluir)
productos_excluir <- ultimas_compras %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
productos_excluir_idx <- which(levels(item_f) %in% productos_excluir)
# Predecir scores para todos los productos
scores <- model$predict(user_index = u_idx, item_index = 1:ncol(X))
# Excluir los productos que ya compró en la última compra
scores[productos_excluir_idx] <- -Inf
# Obtener mejor producto recomendado
best_item_idx <- which.max(scores)
cod_est_recomendado <- levels(item_f)[best_item_idx]
return(data.frame(cliente = cliente, cod_est = cod_est_recomendado))
})
# === INSTALAR Y CARGAR LIBRERÍAS ===
# install.packages("Matrix")
# remotes::install_github("dselivanov/rsparse")
library(dplyr)
library(tidyr)
library(Matrix)
library(rsparse)
library(lubridate)
library(stringr)
# === CARGAR DATOS ===
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets <- readRDS("tickets_enc.RDS")
# Datos objetivo 4
obj4 <- objetivos[[4]]$obj
# Filtrar tickets de clientes objetivo
tickets_filtrados <- tickets %>% filter(id_cliente_enc %in% obj4)
# Convertir fecha
tickets_filtrados <- tickets_filtrados %>% mutate(fecha = ymd(dia))
# Últimos tickets (última compra)
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# Historial excluyendo la última compra
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# Crear matriz de interacciones usuario-producto (conteo)
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
# Pivotar a matriz wide
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = cod_est,
values_from = N_compras,
values_fill = 0,
names_prefix = "id_"
)
# Crear matriz sparse
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
# Entrenar modelo WRMF
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, alpha = 40, feedback = "implicit")
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# Predecir por cliente excluyendo productos de la última compra
codigos_columnas <- str_remove(colnames(matriz_sparse_o4), "id_")
recomendaciones_list <- lapply(1:nrow(matriz_sparse_o4), function(i) {
cliente <- rownames(matriz_sparse_o4)[i]
# Productos de la última compra para excluir
productos_excluir <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
# Scores para todos los productos para cliente i
scores <- modelo_wrmf_o4$predict_single(i, items = 1:ncol(matriz_sparse_o4))
# Excluir productos ya comprados en la última compra
scores[codigos_columnas %in% productos_excluir] <- -Inf
# Producto con mayor score
mejor_idx <- which.max(scores)
producto_recomendado <- codigos_columnas[mejor_idx]
data.frame(
id_cliente_enc = cliente,
cod_est = producto_recomendado,
stringsAsFactors = FALSE
)
})
recomendaciones_list <- lapply(1:nrow(matriz_sparse_o4), function(i) {
cliente <- rownames(matriz_sparse_o4)[i]
# Productos de la última compra para excluir
productos_excluir <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
# Obtener índices de productos a excluir
productos_excluir_idx <- which(codigos_columnas %in% productos_excluir)
# Scores para todos los productos para usuario i
scores <- modelo_wrmf_o4$predict(user_index = i, item_index = 1:ncol(matriz_sparse_o4))
# Excluir productos ya comprados
if(length(productos_excluir_idx) > 0) {
scores[productos_excluir_idx] <- -Inf
}
# Mejor producto
mejor_idx <- which.max(scores)
producto_recomendado <- codigos_columnas[mejor_idx]
data.frame(
id_cliente_enc = cliente,
cod_est = producto_recomendado,
stringsAsFactors = FALSE
)
})
recomendaciones_list <- vector("list", length = nrow(matriz_sparse_o4))
codigos_columnas <- str_remove(colnames(matriz_sparse_o4), "id_")
for (i in seq_len(nrow(matriz_sparse_o4))) {
cliente <- rownames(matriz_sparse_o4)[i]
# Productos de la última compra para excluir
productos_excluir <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
productos_excluir_idx <- which(codigos_columnas %in% productos_excluir)
# Scores para todos los productos para cliente i
scores <- modelo_wrmf_o4$predict(user_index = i, item_index = seq_len(ncol(matriz_sparse_o4)))
# Excluir productos ya comprados
if(length(productos_excluir_idx) > 0) {
scores[productos_excluir_idx] <- -Inf
}
mejor_idx <- which.max(scores)
producto_recomendado <- codigos_columnas[mejor_idx]
recomendaciones_list[[i]] <- data.frame(
id_cliente_enc = cliente,
cod_est = producto_recomendado,
stringsAsFactors = FALSE
)
}
print(colnames(matriz_sparse_o4))
print(dim(matriz_sparse_o4))
colnames(matriz_sparse_o4) <- paste0("id_", colnames(matriz_sparse_o4))
recomendaciones_list <- vector("list", length = nrow(matriz_sparse_o4))
codigos_columnas <- str_remove(colnames(matriz_sparse_o4), "id_")
for (i in seq_len(nrow(matriz_sparse_o4))) {
cliente <- rownames(matriz_sparse_o4)[i]
# Productos de la última compra para excluir
productos_excluir <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
productos_excluir_idx <- which(codigos_columnas %in% productos_excluir)
# Scores para todos los productos para cliente i
scores <- modelo_wrmf_o4$predict(user_index = i, item_index = seq_len(ncol(matriz_sparse_o4)))
# Excluir productos ya comprados
if(length(productos_excluir_idx) > 0) {
scores[productos_excluir_idx] <- -Inf
}
mejor_idx <- which.max(scores)
producto_recomendado <- codigos_columnas[mejor_idx]
recomendaciones_list[[i]] <- data.frame(
id_cliente_enc = cliente,
cod_est = producto_recomendado,
stringsAsFactors = FALSE
)
}
library(dplyr)
library(tidyr)
library(Matrix)
library(rsparse)
library(lubridate)
library(stringr)
# === CARGAR DATOS ===
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets <- readRDS("tickets_enc.RDS")
# Datos objetivo 4
obj4 <- objetivos[[4]]$obj
# Filtrar tickets de clientes objetivo
tickets_filtrados <- tickets %>% filter(id_cliente_enc %in% obj4)
# Convertir fecha
tickets_filtrados <- tickets_filtrados %>% mutate(fecha = ymd(dia))
# Últimos tickets (última compra)
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# Historial excluyendo la última compra
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# Crear matriz de interacciones usuario-producto (conteo)
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
# Pivotar a matriz wide
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = cod_est,
values_from = N_compras,
values_fill = 0,
names_prefix = "id_"
)
# Crear matriz sparse
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
# Entrenar modelo WRMF
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, alpha = 40, feedback = "implicit")
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# Predecir por cliente excluyendo productos de la última compra
codigos_columnas <- str_remove(colnames(matriz_sparse_o4), "id_")
colnames(matriz_sparse_o4) <- paste0("id_", colnames(matriz_sparse_o4))
recomendaciones_list <- vector("list", length = nrow(matriz_sparse_o4))
codigos_columnas <- str_remove(colnames(matriz_sparse_o4), "id_")
for (i in seq_len(nrow(matriz_sparse_o4))) {
cliente <- rownames(matriz_sparse_o4)[i]
# Productos de la última compra para excluir
productos_excluir <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
productos_excluir_idx <- which(codigos_columnas %in% productos_excluir)
# Scores para todos los productos para cliente i
scores <- modelo_wrmf_o4$predict(user_index = i, item_index = seq_len(ncol(matriz_sparse_o4)))
# Excluir productos ya comprados
if(length(productos_excluir_idx) > 0) {
scores[productos_excluir_idx] <- -Inf
}
mejor_idx <- which.max(scores)
producto_recomendado <- codigos_columnas[mejor_idx]
recomendaciones_list[[i]] <- data.frame(
id_cliente_enc = cliente,
cod_est = producto_recomendado,
stringsAsFactors = FALSE
)
}
rownames(matriz_sparse_o4)
ncol(matriz_sparse_o4)
