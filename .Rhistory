cliente = rownames(matriz),
producto_recomendado = productos_recomendados
)
# Limpieza de formatos
resultado$producto_recomendado <- as.character(resultado$producto_recomendado)
productos$cod_est <- as.character(productos$cod_est)
resultado$producto_recomendado <- sub("^X", "", resultado$producto_recomendado)
productos$cod_est <- sub("^X", "", productos$cod_est)
# Merge para obtener descripción del producto
resultado_final <- merge(resultado,
productos,
by.x = "producto_recomendado",
by.y = "cod_est",
all.x = TRUE)
# Selección de columnas finales
resultado_final <- resultado_final[, c("cliente", "producto_recomendado", "descripcion")]
# Ver resumen de recomendaciones
ct <- resultado_final %>%
group_by(descripcion) %>%
count()
# Mostrar tabla resumen
print(ct)
View(ct)
library(ggplot2)
library(ggplot2)
# Paso 1: Contar artículos por compra y cluster
articulos_por_compra <- datos_clus %>%
group_by(kmeans_cluster, num_ticket) %>%
summarise(cantidad_articulos = n(), .groups = 'drop')
clientes_clus=readRDS("clientes_clusterizados.RDS")
tickets_enc<-readRDS("tickets_enc.RDS")
maestroestr<-readRDS("maestroestr.RDS")
datos_clus=left_join(x=clientes_clus, y =tickets_enc, by="id_cliente_enc")
head(datos_clus)
# Paso 1: Contar artículos por compra y cluster
articulos_por_compra <- datos_clus %>%
group_by(kmeans_cluster, num_ticket) %>%
summarise(cantidad_articulos = n(), .groups = 'drop')
# Paso 2: Graficar histograma por cluster
ggplot(articulos_por_compra, aes(x = cantidad_articulos)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
facet_wrap(~ kmeans_cluster, scales = "free_y") +
labs(
title = "Cantidad de artículos por compra, por cluster",
x = "Cantidad de artículos por compra",
y = "Número de compras"
) +
theme_minimal()
# Paso 2: Graficar histograma por cluster
ggplot(articulos_por_compra, aes(x = cantidad_articulos)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "steelblue") +
facet_wrap(~ kmeans_cluster, scales = "free_y") +
labs(
title = "Cantidad de artículos por compra, por cluster",
x = "Cantidad de artículos por compra",
y = "Número de compras"
) +
theme_minimal()
# Contar cantidad de compras por artículo
top_articulos <- datos_clus %>%
group_by(cod_est) %>%
summarise(cantidad = n(), .groups = "drop") %>%
arrange(desc(cantidad)) %>%
slice_head(n = 10)  # Top 10
# Graficar
ggplot(top_articulos, aes(x = reorder(cod_est, cantidad), y = cantidad)) +
geom_bar(stat = "identity", fill = "darkorange") +
coord_flip() +  # Para barras horizontales (mejor lectura)
labs(
title = "Top 10 artículos más comprados",
x = "Código de artículo",
y = "Cantidad de compras"
) +
theme_minimal()
# Paso 1: Calcular conteo por artículo y cluster
top_articulos_cluster <- datos_clus %>%
group_by(kmeans_cluster, cod_est) %>%
summarise(cantidad = n(), .groups = "drop") %>%
arrange(kmeans_cluster, desc(cantidad)) %>%
group_by(kmeans_cluster) %>%
slice_head(n = 10) %>%
ungroup()
# Paso 2: Graficar con facet_wrap para ver cada cluster separado
ggplot(top_articulos_cluster, aes(x = reorder(cod_est, cantidad), y = cantidad, fill = kmeans_cluster)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ kmeans_cluster, scales = "free_y") +
labs(
title = "Top 10 artículos más comprados por cluster",
x = "Código de artículo",
y = "Cantidad de compras"
) +
theme_minimal() +
theme(legend.position = "none")
# Paso 1: Calcular tiempo de actividad por cliente
actividad_cliente <- datos_clus %>%
mutate(dia = as.Date(as.character(dia), format = "%Y%m%d")) %>%
group_by(id_cliente_enc, kmeans_cluster) %>%
summarise(
actividad_dias = as.numeric(difftime(max(dia), min(dia), units = "days")),
.groups = "drop"
)
# Paso 2: Graficar boxplot por cluster
ggplot(actividad_cliente, aes(x = kmeans_cluster, y = actividad_dias, fill = kmeans_cluster)) +
geom_boxplot() +
labs(
title = "Distribución del tiempo de actividad de los clientes por cluster",
x = "Cluster",
y = "Tiempo de actividad (días)"
) +
theme_minimal() +
theme(legend.position = "none")
View(maestroestr)
datos_clus=left_join((x=datos_clus, y=maestroestr, by="cod_est"))
datos_clus=left_join((x=datos_clus, y=maestroestr, by="cod_est"))
datos_clus=left_join(x=datos_clus, y=maestroestr, by="cod_est")
head(datos_clus)
# Paso 1: Calcular conteo por artículo y cluster
top_articulos_cluster <- datos_clus %>%
group_by(kmeans_cluster, descripcion) %>%
summarise(cantidad = n(), .groups = "drop") %>%
arrange(kmeans_cluster, desc(cantidad)) %>%
group_by(kmeans_cluster) %>%
slice_head(n = 10) %>%
ungroup()
# Paso 2: Graficar con facet_wrap para ver cada cluster separado
ggplot(top_articulos_cluster, aes(x = reorder(cod_est, cantidad), y = cantidad, fill = kmeans_cluster)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ kmeans_cluster, scales = "free_y") +
labs(
title = "Top 10 artículos más comprados por cluster",
x = "Código de artículo",
y = "Cantidad de compras"
) +
theme_minimal() +
theme(legend.position = "none")
# Paso 2: Graficar con facet_wrap para ver cada cluster separado
ggplot(top_articulos_cluster, aes(x = reorder(descripcion, cantidad), y = cantidad, fill = kmeans_cluster)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ kmeans_cluster, scales = "free_y") +
labs(
title = "Top 10 artículos más comprados por cluster",
x = "Código de artículo",
y = "Cantidad de compras"
) +
theme_minimal() +
theme(legend.position = "none")
# Paso 1: Calcular tiempo de actividad por cliente
actividad_cliente <- datos_clus %>%
mutate(dia = as.Date(as.character(dia), format = "%Y%m%d")) %>%
group_by(id_cliente_enc, kmeans_cluster) %>%
summarise(
actividad_dias = as.numeric(difftime(max(dia), min(dia), units = "days")),
.groups = "drop"
)
# Paso 2: Graficar boxplot por cluster
ggplot(actividad_cliente, aes(x = kmeans_cluster, y = actividad_dias, fill = kmeans_cluster)) +
geom_boxplot() +
labs(
title = "Distribución del tiempo de actividad de los clientes por cluster",
x = "Cluster",
y = "Tiempo de actividad (días)"
) +
theme_minimal() +
theme(legend.position = "none")
# Asegurar que 'dia' esté en formato fecha
datos_clus <- datos_clus %>%
mutate(dia = as.Date(as.character(dia), format = "%Y%m%d"))
# Calcular duración por cliente y cluster
actividad_por_cluster <- datos_clus %>%
group_by(id_cliente_enc, kmeans_cluster) %>%
summarise(
primera_compra = min(dia),
ultima_compra = max(dia),
.groups = "drop"
) %>%
mutate(duracion_dias = as.numeric(ultima_compra - primera_compra)) %>%
arrange(desc(duracion_dias))
# BOXPLOT por cluster
grafico_box <- ggplot(actividad_por_cluster, aes(x = kmeans_cluster, y = duracion_dias, fill = kmeans_cluster)) +
geom_boxplot(color = "grey30") +
labs(
title = "Distribución del tiempo de actividad de los clientes por cluster",
x = "Cluster",
y = "Duración entre primera y última compra (días)"
) +
theme_minimal() +
theme(legend.position = "none")
# BOXPLOT por cluster
grafico_box <- ggplot(actividad_por_cluster, aes(x = kmeans_cluster, y = duracion_dias, fill = kmeans_cluster)) +
geom_boxplot(color = "grey30") +
labs(
title = "Distribución del tiempo de actividad de los clientes por cluster",
x = "Cluster",
y = "Duración entre primera y última compra (días)"
) +
theme_minimal() +
theme(legend.position = "none")
# Calcular duración por cliente y cluster
actividad_por_cluster <- datos_clus %>%
group_by(id_cliente_enc, kmeans_cluster) %>%
summarise(
primera_compra = min(dia),
ultima_compra = max(dia),
.groups = "drop"
) %>%
mutate(duracion_dias = as.numeric(ultima_compra - primera_compra)) %>%
arrange(desc(duracion_dias))
# BOXPLOT por cluster
grafico_box <- ggplot(actividad_por_cluster, aes(x = kmeans_cluster, y = duracion_dias, fill = kmeans_cluster)) +
geom_boxplot(color = "grey30") +
labs(
title = "Distribución del tiempo de actividad de los clientes por cluster",
x = "Cluster",
y = "Duración entre primera y última compra (días)"
) +
theme_minimal() +
theme(legend.position = "none")
# BOXPLOT por cluster
grafico_box <- ggplot(actividad_por_cluster, aes(x = kmeans_cluster, y = duracion_dias, fill = kmeans_cluster)) +
geom_boxplot(color = "grey30") +
labs(
title = "Distribución del tiempo de actividad de los clientes por cluster",
x = "Cluster",
y = "Duración entre primera y última compra (días)"
) +
theme_minimal() +
theme(legend.position = "none")
# Paso 1: Convertir fecha y extraer día de la semana
datos_dias_semana <- datos_clus %>%
mutate(
dia = as.Date(as.character(dia), format = "%Y%m%d"),
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1)  # Lunes a Domingo
)
library(lubridate)
# Paso 1: Convertir fecha y extraer día de la semana
datos_dias_semana <- datos_clus %>%
mutate(
dia = as.Date(as.character(dia), format = "%Y%m%d"),
dia_semana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1)  # Lunes a Domingo
)
# Paso 2: Contar compras por día y cluster
compras_por_dia <- datos_dias_semana %>%
group_by(kmeans_cluster, dia_semana) %>%
summarise(cantidad = n(), .groups = "drop")
# Paso 3: Graficar
ggplot(compras_por_dia, aes(x = dia_semana, y = cantidad, fill = kmeans_cluster)) +
geom_col(position = "dodge") +
labs(
title = "Días de la semana con más compras por cluster",
x = "Día de la semana",
y = "Cantidad de compras"
) +
scale_fill_brewer(palette = "Set2") +
theme_minimal()
# Cargar datos
maestrostr <- readRDS("Datos/maestroestr.RDS")
# Cargar datos
maestrostr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# Enriquecer tickets
tickets_enc <- tickets_enc %>%
left_join(maestrostr, by = "cod_est")
library(dplyr)
library(tidyr)
library(recommenderlab)
# Enriquecer tickets
tickets_enc <- tickets_enc %>%
left_join(maestrostr, by = "cod_est")
# Crear resumen cliente-producto
resumen <- tickets_enc %>%
count(id_cliente_enc, cod_est, name = "n_compras_producto")
# Transformar a formato ancho
t <- pivot_wider(resumen, names_from = "cod_est", values_from = "n_compras_producto") %>%
data.frame()
rownames(t) <- t[, 1]
t <- t[, -1]
# Convertir a matriz de ratings
t_rec <- as(as.matrix(t), "realRatingMatrix")
# Clientes y productos a conservar
clientes_a_salvar <- c(
"b51353fcf07cb61280eda45e33679871", "02ff5edaa057b63ea0a0010c5402205c",
"25d259d32a2bc254343715f2e347c518", "53ffb83e85fd51cf1ec2fdef3c78b4fd",
"26f424b3bba6aaf97952ac599ed39f75", "32cc820ac27ff143c3ea976f3fe69d34",
"a57938025d714b65612bf2cfde12136d", "af30d404e282749ccd5f5ad0c8e834c7",
"8b9aa623b654a8be21b316a5fdf41007", "e27ceb0a1576648212c4325fdf7d8002",
"fe234baf66f020e01feb5253dfb398f0", "d85ceefcf666f2b27e3e1e1252e5a1ac",
"a8a16b0b76cb14783348e920a59588ed", "1d98f84a5f074ed9c7a47515d4f5f329",
"528435b91691a75f5a60c6ccf4c6294c", "8e8315ed119c1382c4d351bbb188510e",
"fe52311b246f88407a1142d891ad77ae", "503a6539df48964124fe026b9deb5d13",
"a809525fe25b3de695bc87e00bea215f", "ec926181c315b758d775ee64a6a8e033"
)
productos_a_salvar <- c(
"X14351005", "X12650103", "X01027405", "X05030101", "X05030102", "X01012310", "X11040303",
"X08230125", "X01201505", "X05040180", "X01201005", "X09070103", "X04200505",
"X01026410", "X05040181", "X04201005", "X12670111", "X08100903", "X01013315",
"X01027205", "X12650101"
)
# Aplicar filtros preservando clientes y productos deseados
filtro_col_1 <- colCounts(t_rec) > 66.75 | colnames(t_rec) %in% productos_a_salvar
t_rec_1 <- t_rec[, filtro_col_1]
filtro_col_2 <- colMeans(t_rec_1) > 1.293 | colnames(t_rec_1) %in% productos_a_salvar
t_rec_2 <- t_rec_1[, filtro_col_2]
filtro_row_1 <- rowCounts(t_rec_2) > 23 | rownames(t_rec_2) %in% clientes_a_salvar
t_rec_3 <- t_rec_2[filtro_row_1, ]
filtro_row_2 <- rowMeans(t_rec_3) > 1.042 | rownames(t_rec_3) %in% clientes_a_salvar
t_rec_4 <- t_rec_3[filtro_row_2, ]
t_rec_4
rowMeans(t_rec_3)
colCounts(t_rec)
colMeans(t_rec_1)
colCounts(t_rec_4)
summary(t_rec_4)
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 0, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 0]
t_rec_5
t_rec_4
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 5, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 5]
t_rec_5
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 10, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 10]
t_rec_5
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 15, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 15]
t_rec_5
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 20, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 20]
t_rec_5
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 25, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 25]
t_rec_5
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 30, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 30]
t_rec_5
t_rec_4_clean <- t_rec_4[rowCounts(t_rec_4) > 35, ]
t_rec_5 <- t_rec_4_clean[, colCounts(t_rec_4_clean) > 35]
t_rec_5
t_rec_5_clean=t_rec_5[colCounts(t_rec_5) > 30, ]
t_rec_6=t_rec_5_clean[colCounts(t_rec_5_clean) > 30]
t_rec_6
# Cargar datos
maestrostr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# Enriquecer tickets
tickets_enc <- tickets_enc %>%
left_join(maestrostr, by = "cod_est")
# Crear resumen cliente-producto
resumen <- tickets_enc %>%
count(id_cliente_enc, cod_est, name = "n_compras_producto")
# Transformar a formato ancho
t <- pivot_wider(resumen, names_from = "cod_est", values_from = "n_compras_producto") %>%
data.frame()
rownames(t) <- t[, 1]
t <- t[, -1]
# Convertir a matriz de ratings
t_rec <- as(as.matrix(t), "realRatingMatrix")
# Clientes y productos a conservar
clientes_a_salvar <- c(
"b51353fcf07cb61280eda45e33679871", "02ff5edaa057b63ea0a0010c5402205c",
"25d259d32a2bc254343715f2e347c518", "53ffb83e85fd51cf1ec2fdef3c78b4fd",
"26f424b3bba6aaf97952ac599ed39f75", "32cc820ac27ff143c3ea976f3fe69d34",
"a57938025d714b65612bf2cfde12136d", "af30d404e282749ccd5f5ad0c8e834c7",
"8b9aa623b654a8be21b316a5fdf41007", "e27ceb0a1576648212c4325fdf7d8002",
"fe234baf66f020e01feb5253dfb398f0", "d85ceefcf666f2b27e3e1e1252e5a1ac",
"a8a16b0b76cb14783348e920a59588ed", "1d98f84a5f074ed9c7a47515d4f5f329",
"528435b91691a75f5a60c6ccf4c6294c", "8e8315ed119c1382c4d351bbb188510e",
"fe52311b246f88407a1142d891ad77ae", "503a6539df48964124fe026b9deb5d13",
"a809525fe25b3de695bc87e00bea215f", "ec926181c315b758d775ee64a6a8e033"
)
productos_a_salvar <- c(
"X14351005", "X12650103", "X01027405", "X05030101", "X05030102", "X01012310", "X11040303",
"X08230125", "X01201505", "X05040180", "X01201005", "X09070103", "X04200505",
"X01026410", "X05040181", "X04201005", "X12670111", "X08100903", "X01013315",
"X01027205", "X12650101"
)
# Aplicar filtros preservando clientes y productos deseados
filtro_col_1 <- colCounts(t_rec) > 66.75 | colnames(t_rec) %in% productos_a_salvar
t_rec_1 <- t_rec[, filtro_col_1]
filtro_col_2 <- colMeans(t_rec_1) > 1.293 | colnames(t_rec_1) %in% productos_a_salvar
t_rec_2 <- t_rec_1[, filtro_col_2]
filtro_row_1 <- rowCounts(t_rec_2) > 23 | rownames(t_rec_2) %in% clientes_a_salvar
t_rec_3 <- t_rec_2[filtro_row_1, ]
filtro_row_2 <- rowMeans(t_rec_3) > 1.042 | rownames(t_rec_3) %in% clientes_a_salvar
t_rec_4 <- t_rec_3[filtro_row_2, ]
validos <- rowSums(!is.na(A)) > 10
validos <- rowSums(!is.na(A)) > 10
t_rec_5 <- t_rec_4[rowCounts(t_rec_4) > 35, ]
t_rec_6 <- t_rec_5[, colCounts(t_rec_4_clean) > 35]
t_rec_6 <- t_rec_5[, colCounts(t_rec_5) > 35]
t_rec_6
t_rec_6 <- t_rec_5[, colCounts(t_rec_5) > 50]
t_rec_6
t_rec_6 <- t_rec_5[, colCounts(t_rec_5) > 70]
t_rec_6
t_rec_6 <- t_rec_5[, colCounts(t_rec_5) > 80]
t_rec_6
t_rec_6 <- t_rec_5[, colCounts(t_rec_5) > 85]
# Verificaciones opcionales
data.frame(ID = clientes_a_salvar, Presente = clientes_a_salvar %in% rownames(t_rec_4))
t_rec_6 <- t_rec_5[, colCounts(t_rec_5) > 85]
t_rec_6
t_rec_6 <- t_rec_5[, colCounts(t_rec_5) > 100]
t_rec_6
filas_a_conservar <- (rowCounts(t_rec_4) > 35) | (rownames(t_rec_4) %in% clientes_a_salvar)
t_rec_5 <- t_rec_4[filas_a_conservar, ]
columnas_a_conservar <- (colCounts(t_rec_5) > 100) | (colnames(t_rec_5) %in% productos_a_salvar)
t_rec_6 <- t_rec_5[, columnas_a_conservar]
t_rec_6
# Verificaciones opcionales
data.frame(ID = clientes_a_salvar, Presente = clientes_a_salvar %in% rownames(t_rec_4))
data.frame(Producto = productos_a_salvar, Presente = productos_a_salvar %in% colnames(t_rec_4))
# Verifica que los clientes estén presentes
verif_clientes <- data.frame(
ID = clientes_a_salvar,
Presente = clientes_a_salvar %in% rownames(t_rec_4)
)
# Verifica que los productos estén presentes
verif_productos <- data.frame(
Producto = productos_a_salvar,
Presente = productos_a_salvar %in% colnames(t_rec_4)
)
# Mostrar resultados
print("Verificación de clientes:")
print(verif_clientes)
print("Verificación de productos:")
print(verif_productos)
library(dplyr)
library(tidyr)
library(recommenderlab)
# Cargar datos
maestrostr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# Enriquecer tickets
tickets_enc <- tickets_enc %>%
left_join(maestrostr, by = "cod_est")
# Crear resumen cliente-producto
resumen <- tickets_enc %>%
count(id_cliente_enc, cod_est, name = "n_compras_producto")
# Transformar a formato ancho
t <- pivot_wider(resumen, names_from = "cod_est", values_from = "n_compras_producto") %>%
data.frame()
rownames(t) <- t[, 1]
t <- t[, -1]
# Convertir a matriz de ratings
t_rec <- as(as.matrix(t), "realRatingMatrix")
# Clientes y productos a conservar
clientes_a_salvar <- c(
"b51353fcf07cb61280eda45e33679871", "02ff5edaa057b63ea0a0010c5402205c",
"25d259d32a2bc254343715f2e347c518", "53ffb83e85fd51cf1ec2fdef3c78b4fd",
"26f424b3bba6aaf97952ac599ed39f75", "32cc820ac27ff143c3ea976f3fe69d34",
"a57938025d714b65612bf2cfde12136d", "af30d404e282749ccd5f5ad0c8e834c7",
"8b9aa623b654a8be21b316a5fdf41007", "e27ceb0a1576648212c4325fdf7d8002",
"fe234baf66f020e01feb5253dfb398f0", "d85ceefcf666f2b27e3e1e1252e5a1ac",
"a8a16b0b76cb14783348e920a59588ed", "1d98f84a5f074ed9c7a47515d4f5f329",
"528435b91691a75f5a60c6ccf4c6294c", "8e8315ed119c1382c4d351bbb188510e",
"fe52311b246f88407a1142d891ad77ae", "503a6539df48964124fe026b9deb5d13",
"a809525fe25b3de695bc87e00bea215f", "ec926181c315b758d775ee64a6a8e033"
)
productos_a_salvar <- c(
"X14351005", "X12650103", "X01027405", "X05030101", "X05030102", "X01012310", "X11040303",
"X08230125", "X01201505", "X05040180", "X01201005", "X09070103", "X04200505",
"X01026410", "X05040181", "X04201005", "X12670111", "X08100903", "X01013315",
"X01027205", "X12650101"
)
# Aplicar filtros preservando clientes y productos deseados
filtro_col_1 <- colCounts(t_rec) > 66.75 | colnames(t_rec) %in% productos_a_salvar
t_rec_1 <- t_rec[, filtro_col_1]
filtro_col_2 <- colMeans(t_rec_1) > 1.293 | colnames(t_rec_1) %in% productos_a_salvar
t_rec_2 <- t_rec_1[, filtro_col_2]
filtro_row_1 <- rowCounts(t_rec_2) > 23 | rownames(t_rec_2) %in% clientes_a_salvar
t_rec_3 <- t_rec_2[filtro_row_1, ]
filtro_row_2 <- rowMeans(t_rec_3) > 1.042 | rownames(t_rec_3) %in% clientes_a_salvar
t_rec_4 <- t_rec_3[filtro_row_2, ]
filas_a_conservar <- (rowCounts(t_rec_4) > 35) | (rownames(t_rec_4) %in% clientes_a_salvar)
t_rec_5 <- t_rec_4[filas_a_conservar, ]
columnas_a_conservar <- (colCounts(t_rec_5) > 100) | (colnames(t_rec_5) %in% productos_a_salvar)
t_rec_6 <- t_rec_5[, columnas_a_conservar]
# Verificaciones opcionales
data.frame(ID = clientes_a_salvar, Presente = clientes_a_salvar %in% rownames(t_rec_4))
data.frame(Producto = productos_a_salvar, Presente = productos_a_salvar %in% colnames(t_rec_4))
# Verifica que los clientes estén presentes
verif_clientes <- data.frame(
ID = clientes_a_salvar,
Presente = clientes_a_salvar %in% rownames(t_rec_4)
)
# Verifica que los productos estén presentes
verif_productos <- data.frame(
Producto = productos_a_salvar,
Presente = productos_a_salvar %in% colnames(t_rec_4)
)
# Mostrar resultados
print("Verificación de clientes:")
print(verif_clientes)
print("Verificación de productos:")
print(verif_productos)
# Convertir el objeto 'realRatingMatrix' a un formato de matriz normal
matriz <- as(t_rec_4, "matrix")
# Convertir la matriz a un data.frame
matriz_df <- as.data.frame(matriz)
# Convertir el objeto 'realRatingMatrix' a un formato de matriz normal
matriz <- as(t_rec_6, "matrix")
# Convertir la matriz a un data.frame
matriz_df <- as.data.frame(matriz)
# Ver las primeras filas
head(matriz_df)
saveRDS(matriz_df, "MatrizSuperReducida.RDS")
