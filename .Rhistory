ggplot(tabla(), aes(x = HeartDisease)) +
geom_bar(fill = "lightblue", color = "steelblue")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
library(DT) # tablas y graficos plotly
library(shinyWidgets) # inputs shiny
## Ejercicio 1 - Parte 1
library(readr)
data <- read.csv("C:/Users/helen/Downloads/causas_infartos.csv")
View(data)
### Ejercicio 2 - Parte 1
ui <- fluidPage(
titlePanel("Las causas de los infartos"),
sidebarLayout(
pickerInput(inputId = "consumir_alcohol", label = "Consume alcohol:", choices = unique(data$AlcoholDrinking)),
pickerInput(inputId = "dificil_caminar", label = "Dificultad al caminar:", choices = unique(data$DiffWalking)),
pickerInput(inputId = "asma", label = "Tiene asma:", choices = unique(data$Asthma))
),
mainPanel(
plotOutput("plot_infartos")
)
)
server <- function(input, output) {
tabla <- reactive({
filter(
data,
AlcoholDrinking == input$consumir_alcohol &
DiffWalking == input$dificil_caminar &
Asthma == input$asma
)
})
output$plot_infartos <- renderPlot({
ggplot(tabla(), aes(x = HeartDisease)) +
geom_bar(fill = "lightblue", color = "steelblue")
})
}
shinyApp(ui = ui, server = server)
### Ejercicio 2 - Parte 2
ui <- fluidPage(
titlePanel("Las causas de los infartos"),
sidebarLayout(
pickerInput(inputId = "consumir_alcohol", label = "Consume alcohol:", choices = unique(data$AlcoholDrinking)),
pickerInput(inputId = "dificil_caminar", label = "Dificultad al caminar:", choices = unique(data$DiffWalking)),
pickerInput(inputId = "asma", label = "Tiene asma:", choices = unique(data$Asthma)),
actionButton(inputId = "boton", label = "Calcular")
),
mainPanel(
plotOutput("plot_infartos")
)
)
### Ejercicio 2 - Parte 1
ui <- fluidPage(
titlePanel("Las causas de los infartos"),
sidebarLayout(
pickerInput(inputId = "consumir_alcohol", label = "Consume alcohol:", choices = unique(data$AlcoholDrinking)),
pickerInput(inputId = "dificil_caminar", label = "Dificultad al caminar:", choices = unique(data$DiffWalking)),
pickerInput(inputId = "asma", label = "Tiene asma:", choices = unique(data$Asthma))
),
mainPanel(
plotOutput("plot_infartos")
)
)
server <- function(input, output) {
tabla <- reactive({
filter(
data,
AlcoholDrinking == input$consumir_alcohol &
DiffWalking == input$dificil_caminar &
Asthma == input$asma
)
})
output$plot_infartos <- renderPlot({
ggplot(tabla(), aes(x = HeartDisease)) +
geom_bar(fill = "lightblue", color = "steelblue")
})
}
shinyApp(ui = ui, server = server)
### Ejercicio 2 - Parte 1
ui <- fluidPage(
titlePanel("Las causas de los infartos"),
sidebarLayout(
pickerInput(inputId = "consumir_alcohol", label = "Consume alcohol:", choices = unique(data$AlcoholDrinking), selected = "Yes"),
pickerInput(inputId = "dificil_caminar", label = "Dificultad al caminar:", choices = unique(data$DiffWalking), selected = "No"),
pickerInput(inputId = "asma", label = "Tiene asma:", choices = unique(data$Asthma), selected = "Yes")
),
mainPanel(
plotOutput("plot_infartos")
)
)
### Ejercicio 2 - Parte 1
ui <- fluidPage(
titlePanel("Las causas de los infartos"),
sidebarLayout(
sidebarPanel(
pickerInput(inputId = "consumir_alcohol", label = "Consume alcohol:", choices = unique(data$AlcoholDrinking), selected = "Yes"),
pickerInput(inputId = "dificil_caminar", label = "Dificultad al caminar:", choices = unique(data$DiffWalking), selected = "No"),
pickerInput(inputId = "asma", label = "Tiene asma:", choices = unique(data$Asthma), selected = "Yes")
),
mainPanel(
plotOutput("plot_infartos")
)
)
)
server <- function(input, output) {
tabla <- reactive({
filter(
data,
AlcoholDrinking == input$consumir_alcohol &
DiffWalking == input$dificil_caminar &
Asthma == input$asma
)
})
output$plot_infartos <- renderPlot({
ggplot(tabla(), aes(x = HeartDisease)) +
geom_bar(fill = "lightblue", color = "steelblue")
})
}
shinyApp(ui = ui, server = server)
### Ejercicio 2 - Parte 1
ui <- fluidPage(
titlePanel("Las causas de los infartos"),
sidebarLayout(
sidebarPanel(
pickerInput(inputId = "consumir_alcohol", label = "Consume alcohol:", choices = unique(data$AlcoholDrinking), selected = "Yes"),
pickerInput(inputId = "dificil_caminar", label = "Dificultad al caminar:", choices = unique(data$DiffWalking), selected = "No"),
pickerInput(inputId = "asma", label = "Tiene asma:", choices = unique(data$Asthma), selected = "No")
),
mainPanel(
plotOutput("plot_infartos")
)
)
)
server <- function(input, output) {
tabla <- reactive({
filter(
data,
AlcoholDrinking == input$consumir_alcohol &
DiffWalking == input$dificil_caminar &
Asthma == input$asma
)
})
output$plot_infartos <- renderPlot({
ggplot(tabla(), aes(x = HeartDisease)) +
geom_bar(fill = "lightblue", color = "steelblue")
})
}
shinyApp(ui = ui, server = server)
### Ejercicio 2 - Parte 2
ui <- fluidPage(
titlePanel("Las causas de los infartos"),
sidebarLayout(
sidebarPanel(
pickerInput(inputId = "consumir_alcohol", label = "Consume alcohol:", choices = unique(data$AlcoholDrinking), selected = "Yes"),
pickerInput(inputId = "dificil_caminar", label = "Dificultad al caminar:", choices = unique(data$DiffWalking), selected = "No"),
pickerInput(inputId = "asma", label = "Tiene asma:", choices = unique(data$Asthma), selected = "No"),
actionButton(inputId = "boton", label = "Calcular")
),
mainPanel(
plotOutput("plot_infartos")
)
)
)
server <- function(input, output) {
tabla <- reactive({
filter(
data,
AlcoholDrinking == input$consumir_alcohol &
DiffWalking == input$dificil_caminar &
Asthma == input$asma
)
})
output$plot_infartos <- renderPlot({
ggplot(tabla(), aes(x = HeartDisease)) +
geom_bar(fill = "lightblue", color = "steelblue")
})
}
shinyApp(ui = ui, server = server)
# RECU 21/22
library(shiny)
library(ggplot2)
library(plotly)
library(DT)
library(readr)
df <- read.csvread_csv("C:/Users/helen/Downloads/empleados_google.csv")
df <- read.csv("C:/Users/helen/Downloads/empleados_google.csv")
View(df)
# EJERCICIO 1 - parte 1
ui <- fluidPage(
titlePanel("Los salario en Google"),
sidebarLayout(
sidebarPanel(
pickerInput(inputId = "posicion", label = "Selecciona la posicion:", choices = unique(df$Position)),
pickerInput(inputId = "sexo", label = "Selecciona el sexo:", choices = unique(df$Sex), selected = "M")
),
mainPanel(
tabsetPanel(
tabPanel("Personas por departamento", DTOutput("plot_pers_departamento")),
tabPanel("Salarios y edad", DTOutput("plot_salario_edad")),
tabPanel("Relacion entre salario y edad, por departamento", DTOuput("age_salary_plot")),
tabPanel("Tabla resumen", DTOutput("summary_table"))
)
)
)
)
# EJERCICIO 1 - parte 1
ui <- fluidPage(
titlePanel("Los salario en Google"),
sidebarLayout(
sidebarPanel(
pickerInput(inputId = "posicion", label = "Selecciona la posicion:", choices = unique(df$Position)),
pickerInput(inputId = "sexo", label = "Selecciona el sexo:", choices = unique(df$Sex), selected = "M")
),
mainPanel(
tabsetPanel(
tabPanel("Personas por departamento", DTOutput("plot_pers_departamento")),
tabPanel("Salarios y edad", DTOutput("plot_salario_edad")),
tabPanel("Relacion entre salario y edad, por departamento", DTOutput("age_salary_plot")),
tabPanel("Tabla resumen", DTOutput("summary_table"))
)
)
)
)
mdata<-read.csv("C:\\Datuak\\KLASEAK\\GBDA\\2425\\datamining\\reto4\\datos.txt",header=FALSE)
colnames(mdata)<-c("cod_cli","cod_est","valoraciones")
str(mdata)
mdata$cod_cli<-as.factor(mdata$cod_cli)
mdata$cod_est<-as.factor(mdata$cod_est)
data_sparse <- Matrix::sparseMatrix(i = as.numeric(mdata$cod_cli)
, j = as.numeric(mdata$cod_est)
, x = as.numeric(mdata$valoraciones),
dimnames = list(id_cliente = levels(mdata$cod_cli),
cod_est = levels(mdata$cod_est)))
mdata <- read.csv("C:\Users\helen\OneDrive\Escritorio\BData\1º\reto4\DMining\datos.txt", header=FALSE)
colnames(mdata) <- c("cod_cli", "cod_est", "valoraciones")
str(mdata)
library(recommenderlab)
mdata <- read.csv("C:\Users\helen\OneDrive\Escritorio\BData\1º\reto4\DMining\datos.txt", header=FALSE)
# ===============================
# 1. Librerías necesarias
# ===============================
library(lubridate)
library(dplyr)
library(naniar)
library(tidyr)
library(ggplot2)
library(cluster)
library(recosystem)
# ===============================
# 2. Carga y preprocesamiento de datos
# ===============================
maestrostr <- readRDS("Datos/Originales/maestroestr.RDS")
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
tickets_enc <- readRDS("Datos/Originales/tickets_enc.RDS")
# Formateo inicial
tickets_enc <- tickets_enc %>%
mutate(
num_ticket = as.character(num_ticket),
dia        = ymd(dia),
num_ticket = paste(num_ticket, id_cliente_enc)
)
# ===============================
# 1. Librerías necesarias
# ===============================
library(lubridate)
library(dplyr)
library(naniar)
library(tidyr)
library(ggplot2)
library(cluster)
library(recosystem)
# ===============================
# 2. Carga y preprocesamiento de datos
# ===============================
maestrostr <- readRDS("Datos/Originales/maestroestr.RDS")
objetivos <- readRDS("Datos/Originales/objetivos.RDS")
tickets_enc <- readRDS("Datos/Originales/tickets_enc.RDS")
# Formateo inicial
tickets_enc <- tickets_enc %>%
mutate(
num_ticket = as.character(num_ticket),
dia        = ymd(dia),
num_ticket = paste(num_ticket, id_cliente_enc)
)
# ===============================
# 2. Carga y preprocesamiento de datos
# ===============================
maestrostr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# Formateo inicial
tickets_enc <- tickets_enc %>%
mutate(
num_ticket = as.character(num_ticket),
dia        = ymd(dia),
num_ticket = paste(num_ticket, id_cliente_enc)
)
# Verificar NAs
vis_miss(tickets_enc, warn_large_data = FALSE)
# Agregar día de la semana
tickets_enc <- tickets_enc %>%
mutate(DiaSemana = wday(dia, week_start = 1))
# ===============================
# 3. Ingeniería de características para clustering
# ===============================
datos_clientes <- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
total_productos       = n(),
productos_distintos    = n_distinct(cod_est),
dias_activos          = as.numeric(max(dia) - min(dia)),
compras_por_semana    = ifelse(dias_activos > 0, n() / (dias_activos / 7), n()),
compras_entre_semana  = sum(DiaSemana %in% 1:5),
compras_fin_de_semana = sum(DiaSemana %in% 6:7)
) %>%
ungroup()
# Eliminar outliers con IQR
outliers_iqr <- function(x) {
q1 <- quantile(x, 0.25, na.rm = TRUE)
q3 <- quantile(x, 0.75, na.rm = TRUE)
iqr <- q3 - q1
which(x < (q1 - 1.5 * iqr) | x > (q3 + 1.5 * iqr))
}
idx_out <- unique(unlist(lapply(datos_clientes[-1], outliers_iqr)))
datos_sin_outliers <- datos_clientes[-idx_out, ]
# Escalado
datos_scaled <- datos_sin_outliers %>% select(-id_cliente_enc) %>% scale()
# ===============================
# 4. Método del codo para K-means
# ===============================
set.seed(123)
wss <- map_dbl(1:15, ~ kmeans(datos_scaled, centers = .x, nstart = 25)$tot.withinss)
# ===============================
# 8. Tabla de centroides
# ===============================
centroides_clusters <- as.data.frame(kmeans_result$centers)
# ===============================
# 1. Librerías necesarias
# ===============================
library(lubridate)
library(dplyr)
library(naniar)
library(tidyr)
library(ggplot2)
library(cluster)
library(recosystem)
# ===============================
# 2. Carga y preprocesamiento de datos
# ===============================
maestrostr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# Formateo inicial
tickets_enc <- tickets_enc %>%
mutate(
num_ticket = as.character(num_ticket),
dia        = ymd(dia),
num_ticket = paste(num_ticket, id_cliente_enc)
)
# Verificar NAs
vis_miss(tickets_enc, warn_large_data = FALSE)
# ===============================
# 1. Librerías necesarias
# ===============================
library(lubridate)
library(dplyr)
library(naniar)
library(tidyr)
library(ggplot2)
library(cluster)
library(recosystem)
# ===============================
# 2. Carga y preprocesamiento de datos
# ===============================
maestrostr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# Formateo inicial
tickets_enc <- tickets_enc %>%
mutate(
num_ticket = as.character(num_ticket),
dia        = ymd(dia),
num_ticket = paste(num_ticket, id_cliente_enc)
)
# Verificar NAs
vis_miss(tickets_enc, warn_large_data = FALSE)
# Agregar día de la semana
tickets_enc <- tickets_enc %>%
mutate(DiaSemana = wday(dia, week_start = 1))
# Agregar día de la semana
tickets_enc <- tickets_enc %>%
mutate(DiaSemana = wday(dia, week_start = 1))
# ===============================
# 3. Ingeniería de características para clustering
# ===============================
datos_clientes <- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
total_productos       = n(),
productos_distintos    = n_distinct(cod_est),
dias_activos          = as.numeric(max(dia) - min(dia)),
compras_por_semana    = ifelse(dias_activos > 0, n() / (dias_activos / 7), n()),
compras_entre_semana  = sum(DiaSemana %in% 1:5),
compras_fin_de_semana = sum(DiaSemana %in% 6:7)
) %>%
ungroup()
# Eliminar outliers con IQR
outliers_iqr <- function(x) {
q1 <- quantile(x, 0.25, na.rm = TRUE)
q3 <- quantile(x, 0.75, na.rm = TRUE)
iqr <- q3 - q1
which(x < (q1 - 1.5 * iqr) | x > (q3 + 1.5 * iqr))
}
idx_out <- unique(unlist(lapply(datos_clientes[-1], outliers_iqr)))
datos_sin_outliers <- datos_clientes[-idx_out, ]
# Escalado
datos_scaled <- datos_sin_outliers %>% select(-id_cliente_enc) %>% scale()
# ===============================
# 4. Método del codo para K-means
# ===============================
set.seed(123)
wss <- map_dbl(1:15, ~ kmeans(datos_scaled, centers = .x, nstart = 25)$tot.withinss)
# ===============================
# 1. Librerías necesarias
# ===============================
library(lubridate)
library(dplyr)
library(naniar)
library(tidyr)
library(ggplot2)
library(cluster)
library(recosystem)
wss <- map_dbl(1:15, ~ kmeans(datos_scaled, centers = .x, nstart = 25)$tot.withinss)
library(purrr)
# ===============================
# 1. Librerías necesarias
# ===============================
library(lubridate)
library(dplyr)
library(naniar)
library(tidyr)
library(ggplot2)
library(cluster)
library(recosystem)
library(purrr)
# ===============================
# 2. Carga y preprocesamiento de datos
# ===============================
maestrostr <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets_enc <- readRDS("tickets_enc.RDS")
# Formateo inicial
tickets_enc <- tickets_enc %>%
mutate(
num_ticket = as.character(num_ticket),
dia        = ymd(dia),
num_ticket = paste(num_ticket, id_cliente_enc)
)
# Verificar NAs
vis_miss(tickets_enc, warn_large_data = FALSE)
# Agregar día de la semana
tickets_enc <- tickets_enc %>%
mutate(DiaSemana = wday(dia, week_start = 1))
# ===============================
# 3. Ingeniería de características para clustering
# ===============================
datos_clientes <- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
total_productos       = n(),
productos_distintos    = n_distinct(cod_est),
dias_activos          = as.numeric(max(dia) - min(dia)),
compras_por_semana    = ifelse(dias_activos > 0, n() / (dias_activos / 7), n()),
compras_entre_semana  = sum(DiaSemana %in% 1:5),
compras_fin_de_semana = sum(DiaSemana %in% 6:7)
) %>%
ungroup()
# Eliminar outliers con IQR
outliers_iqr <- function(x) {
q1 <- quantile(x, 0.25, na.rm = TRUE)
q3 <- quantile(x, 0.75, na.rm = TRUE)
iqr <- q3 - q1
which(x < (q1 - 1.5 * iqr) | x > (q3 + 1.5 * iqr))
}
idx_out <- unique(unlist(lapply(datos_clientes[-1], outliers_iqr)))
datos_sin_outliers <- datos_clientes[-idx_out, ]
# Escalado
datos_scaled <- datos_sin_outliers %>% select(-id_cliente_enc) %>% scale()
# ===============================
# 4. Método del codo para K-means
# ===============================
set.seed(123)
wss <- map_dbl(1:15, ~ kmeans(datos_scaled, centers = .x, nstart = 25)$tot.withinss)
elbow_df <- tibble(k = 1:15, wss = wss)
# Graficar método del codo
ggplot(elbow_df, aes(x = k, y = wss)) +
geom_line() +
geom_point() +
labs(
title = "Método del Codo: WSS vs Número de Clusters",
x = "Número de Clusters (k)",
y = "Suma de Cuadrados Intra-cluster (WSS)"
) +
theme_minimal()
# ===============================
# 5. K-means clustering (k = 3)
# ===============================
set.seed(123)
kmeans_result <- kmeans(datos_scaled, centers = 3, nstart = 25)
