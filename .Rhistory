descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
# plumber.R
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
# Cargar modelo y datos
modelo_ALS <- readRDS("modelo_als.rds")
matriz_sparse <- readRDS("matriz_sparse.rds")
clientes_objetivo <- readRDS("clientes_objetivo.rds")
productos <- readRDS("productos.rds")
#* @apiTitle API de Recomendación ALS
#* Recomienda un producto al cliente
#* @param cliente_id ID del cliente
#* @get /recomendar
function(cliente_id) {
cliente_id <- as.character(cliente_id)
if (!(cliente_id %in% rownames(matriz_sparse))) {
return(list(error = "Cliente no encontrado en matriz"))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
# plumber.R
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
# Cargar modelo y datos
modelo_ALS <- readRDS("modelo_als.rds")
matriz_sparse <- readRDS("matriz_sparse.rds")
clientes_objetivo <- readRDS("clientes_objetivo.rds")
productos <- readRDS("productos.rds")
#* @apiTitle API de Recomendación ALS
#* Recomienda un producto al cliente
#* @param cliente_id ID del cliente
#* @get /recomendar
function(cliente_id) {
cliente_id <- as.character(cliente_id)
if (!(cliente_id %in% rownames(matriz_sparse))) {
return(list(error = "Cliente no encontrado en matriz"))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
plumb(file='apibien.R')$run()
plumb(file='apibien.R')$run()
plumb(file='apibien.R')$run()
cliente_id <- "26f424b3bba6aaf97952ac599ed39f75"
if (!(cliente_id %in% rownames(matriz_sparse))) {
print("Cliente no encontrado en matriz")
} else {
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
cliente_id <- "26f424b3bba6aaf97952ac599ed39f75"
if (!(cliente_id %in% rownames(matriz_sparse))) {
print("Cliente no encontrado en matriz")
} else {
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
cliente_id <- "26f424b3bba6aaf97952ac599ed39f75"
if (!(cliente_id %in% rownames(matriz_sparse))) {
print("Cliente no encontrado en matriz")
} else {
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
cliente_id <- "26f424b3bba6aaf97952ac599ed39f75"
if (!(cliente_id %in% rownames(matriz_sparse))) {
print("Cliente no encontrado en matriz")
} else {
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(
matriz_sparse[user_idx, , drop = FALSE],
k = ncol(matriz_sparse),
type = "score"
)
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
if (length(descripcion) == 0) {
descripcion <- NA
}
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
# Cargar modelo y datos
modelo_ALS <- readRDS("modelo_als.rds")
matriz_sparse <- readRDS("matriz_sparse.rds")
clientes_objetivo <- readRDS("clientes_objetivo.rds")
productos <- readRDS("productos.rds")
#* Recomienda un producto al cliente
#* @param cliente_id ID del cliente
#* @get /recomendar
function(cliente_id) {
cliente_id <- as.character(cliente_id)
if (!(cliente_id %in% rownames(matriz_sparse))) {
return(list(error = "Cliente no encontrado en matriz"))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], k = ncol(matriz_sparse), type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
plumb(file='apibien.R')$run()
plumb(file='apibien.R')$run()
plumb(file='apibien.R')$run()
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
# Cargar modelo y datos
modelo_ALS <- readRDS("modelo_als.rds")
matriz_sparse <- readRDS("matriz_sparse.rds")
clientes_objetivo <- readRDS("clientes_objetivo.rds")
productos <- readRDS("productos.rds")
#* Recomienda un producto al cliente
#* @param cliente_id ID del cliente
#* @get /recomendar
function(cliente_id) {
cliente_id <- as.character(cliente_id)
if (!(cliente_id %in% rownames(matriz_sparse))) {
return(list(error = "Cliente no encontrado en matriz"))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(matriz_sparse[user_idx, , drop = FALSE], k = ncol(matriz_sparse), type = "score")
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
descripcion <- productos$descripcion[productos$cod_est == cod_producto]
score <- user_scores[best_product_idx]
list(
cliente = cliente_id,
producto_recomendado = cod_producto,
descripcion = descripcion,
score = score
)
}
plumb(file='apibien.R')$run()
library(plumber)
library(Matrix)
library(rsparse)
library(dplyr)
library(jsonlite)
# Función para cargar datos de forma segura
cargar_datos_modelo <- function() {
tryCatch({
cat("📊 Cargando modelo y datos...\n")
modelo_ALS <<- readRDS("modelo_als.rds")
matriz_sparse <<- readRDS("matriz_sparse.rds")
clientes_objetivo <<- readRDS("clientes_objetivo.rds")
productos <<- readRDS("productos.rds")
cat("✅ Datos cargados exitosamente\n")
cat(sprintf("   - Clientes en matriz: %d\n", nrow(matriz_sparse)))
cat(sprintf("   - Productos disponibles: %d\n", ncol(matriz_sparse)))
cat(sprintf("   - Catálogo de productos: %d\n", nrow(productos)))
return(TRUE)
}, error = function(e) {
cat("❌ Error cargando datos:", e$message, "\n")
return(FALSE)
})
}
# Cargar datos al iniciar
if (!cargar_datos_modelo()) {
stop("No se pudieron cargar los datos del modelo")
}
#' Obtener información detallada del producto
#' @param cod_producto Código del producto
obtener_info_producto <- function(cod_producto) {
producto_info <- productos[productos$cod_est == cod_producto, ]
if (nrow(producto_info) == 0) {
return(list(
codigo = cod_producto,
descripcion = "Producto no encontrado en catálogo",
disponible = FALSE
))
}
return(list(
codigo = cod_producto,
descripcion = producto_info$descripcion[1],
disponible = TRUE
))
}
#' Validar si el cliente existe
#' @param cliente_id ID del cliente
validar_cliente <- function(cliente_id) {
cliente_id %in% rownames(matriz_sparse)
}
#' Formatear respuesta de éxito
crear_respuesta_exitosa <- function(cliente_id, producto_info, score, tiempo_ms) {
list(
status = "success",
timestamp = Sys.time(),
tiempo_procesamiento_ms = tiempo_ms,
datos = list(
cliente = list(
id = cliente_id,
existe_en_sistema = TRUE
),
recomendacion = list(
producto = producto_info,
puntuacion = round(score, 4),
confianza = ifelse(score > 0.5, "Alta", ifelse(score > 0.2, "Media", "Baja"))
)
)
)
}
#' Formatear respuesta de error
crear_respuesta_error <- function(codigo, mensaje, detalles = NULL) {
respuesta <- list(
status = "error",
timestamp = Sys.time(),
error = list(
codigo = codigo,
mensaje = mensaje
)
)
if (!is.null(detalles)) {
respuesta$error$detalles <- detalles
}
return(respuesta)
}
#* Endpoint principal: Obtener recomendación personalizada
#* @tag Recomendaciones
#* @param cliente_id:str ID único del cliente (requerido)
#* @get /recomendar
#* @serializer unboxedJSON
#* @response 200 Recomendación generada exitosamente
#* @response 400 Parámetros inválidos
#* @response 404 Cliente no encontrado
#* @response 500 Error interno del servidor
function(cliente_id) {
inicio <- Sys.time()
# Validación de parámetros
if (missing(cliente_id) || is.null(cliente_id) || cliente_id == "") {
return(crear_respuesta_error(
codigo = "PARAMETRO_REQUERIDO",
mensaje = "El parámetro 'cliente_id' es requerido",
detalles = "Proporcione un ID de cliente válido"
))
}
cliente_id <- as.character(cliente_id)
# Validar existencia del cliente
if (!validar_cliente(cliente_id)) {
return(crear_respuesta_error(
codigo = "CLIENTE_NO_ENCONTRADO",
mensaje = "Cliente no encontrado en el sistema",
detalles = sprintf("El cliente '%s' no existe en la matriz de datos", cliente_id)
))
}
tryCatch({
# Obtener índice del usuario
user_idx <- which(rownames(matriz_sparse) == cliente_id)
# Generar puntuaciones de recomendación
user_scores <- modelo_ALS$predict(
matriz_sparse[user_idx, , drop = FALSE],
k = ncol(matriz_sparse),
type = "score"
)
# Excluir productos ya comprados
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
# Si no hay productos recomendables
if (all(is.infinite(user_scores))) {
return(crear_respuesta_error(
codigo = "SIN_RECOMENDACIONES",
mensaje = "No se pueden generar recomendaciones",
detalles = "El cliente ya ha comprado todos los productos disponibles"
))
}
# Obtener mejor producto
best_product_idx <- which.max(user_scores)
cod_producto <- colnames(matriz_sparse)[best_product_idx]
cod_producto <- sub("^X", "", cod_producto)
# Obtener información del producto
producto_info <- obtener_info_producto(cod_producto)
score <- user_scores[best_product_idx]
# Calcular tiempo de procesamiento
tiempo_ms <- as.numeric(difftime(Sys.time(), inicio, units = "secs")) * 1000
return(crear_respuesta_exitosa(cliente_id, producto_info, score, tiempo_ms))
}, error = function(e) {
return(crear_respuesta_error(
codigo = "ERROR_PROCESAMIENTO",
mensaje = "Error interno al generar recomendación",
detalles = e$message
))
})
}
#* Obtener múltiples recomendaciones
#* @tag Recomendaciones
#* @param cliente_id:str ID único del cliente
#* @param limite:int Número máximo de recomendaciones (por defecto: 5)
#* @get /recomendar/multiple
#* @serializer unboxedJSON
function(cliente_id, limite = 5) {
inicio <- Sys.time()
if (missing(cliente_id) || is.null(cliente_id) || cliente_id == "") {
return(crear_respuesta_error(
codigo = "PARAMETRO_REQUERIDO",
mensaje = "El parámetro 'cliente_id' es requerido"
))
}
cliente_id <- as.character(cliente_id)
limite <- as.numeric(limite)
if (is.na(limite) || limite <= 0 || limite > 50) {
limite <- 5
}
if (!validar_cliente(cliente_id)) {
return(crear_respuesta_error(
codigo = "CLIENTE_NO_ENCONTRADO",
mensaje = "Cliente no encontrado en el sistema"
))
}
tryCatch({
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_scores <- modelo_ALS$predict(
matriz_sparse[user_idx, , drop = FALSE],
k = ncol(matriz_sparse),
type = "score"
)
user_compras <- matriz_sparse[user_idx, ]
user_scores[user_compras > 0] <- -Inf
# Obtener top N productos
top_indices <- order(user_scores, decreasing = TRUE)[1:min(limite, sum(!is.infinite(user_scores)))]
recomendaciones <- lapply(top_indices, function(idx) {
cod_producto <- sub("^X", "", colnames(matriz_sparse)[idx])
producto_info <- obtener_info_producto(cod_producto)
score <- user_scores[idx]
list(
ranking = which(top_indices == idx),
producto = producto_info,
puntuacion = round(score, 4),
confianza = ifelse(score > 0.5, "Alta", ifelse(score > 0.2, "Media", "Baja"))
)
})
tiempo_ms <- as.numeric(difftime(Sys.time(), inicio, units = "secs")) * 1000
return(list(
status = "success",
timestamp = Sys.time(),
tiempo_procesamiento_ms = tiempo_ms,
datos = list(
cliente = list(id = cliente_id),
total_recomendaciones = length(recomendaciones),
limite_solicitado = limite,
recomendaciones = recomendaciones
)
))
}, error = function(e) {
return(crear_respuesta_error(
codigo = "ERROR_PROCESAMIENTO",
mensaje = "Error al generar múltiples recomendaciones",
detalles = e$message
))
})
}
#* Verificar estado de salud de la API
#* @tag Sistema
#* @get /health
#* @serializer unboxedJSON
function() {
list(
status = "healthy",
timestamp = Sys.time(),
version = "2.0.0",
sistema = list(
modelo_cargado = exists("modelo_ALS"),
matriz_disponible = exists("matriz_sparse"),
total_clientes = if(exists("matriz_sparse")) nrow(matriz_sparse) else 0,
total_productos = if(exists("matriz_sparse")) ncol(matriz_sparse) else 0
),
uptime = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
)
}
#* Obtener información de un cliente específico
#* @tag Sistema
#* @param cliente_id:str ID del cliente
#* @get /cliente/info
#* @serializer unboxedJSON
function(cliente_id) {
if (missing(cliente_id) || is.null(cliente_id) || cliente_id == "") {
return(crear_respuesta_error(
codigo = "PARAMETRO_REQUERIDO",
mensaje = "El parámetro 'cliente_id' es requerido"
))
}
cliente_id <- as.character(cliente_id)
if (!validar_cliente(cliente_id)) {
return(crear_respuesta_error(
codigo = "CLIENTE_NO_ENCONTRADO",
mensaje = "Cliente no encontrado en el sistema"
))
}
user_idx <- which(rownames(matriz_sparse) == cliente_id)
user_compras <- matriz_sparse[user_idx, ]
productos_comprados <- sum(user_compras > 0)
list(
status = "success",
timestamp = Sys.time(),
datos = list(
cliente_id = cliente_id,
existe = TRUE,
productos_comprados = productos_comprados,
productos_disponibles = ncol(matriz_sparse) - productos_comprados,
puede_recibir_recomendaciones = productos_comprados < ncol(matriz_sparse)
)
)
}
cat("🚀 API de Recomendación ALS v2.0.0 iniciada\n")
cat("📚 Documentación disponible en: http://localhost:8000/__docs__/\n")
cat("🏥 Health check: http://localhost:8000/health\n")
cat("💡 Endpoint principal: http://localhost:8000/recomendar?cliente_id=TU_ID\n")
plumb(file='apibien.R')$run()
