)
)
),
#Panel de modelado
nav_panel(
title = tags$span(icon("brain"), "Modelado y Métricas"),
navset_card_tab(
nav_panel("Evaluación TopNList",
card(
card_header("Métricas de Evaluación - TopNList"),
DTOutput("tabla_metricas_topNList")
)
),
nav_panel("Evaluación Ratings",
card(
card_header("Métricas de Evaluación - Ratings"),
DTOutput("tabla_metricas_ratings")
)
),
nav_panel("Matriz de Recomendación",
card(
card_header("Visualización de la Matriz"),
p("Análisis de la matriz de recomendación utilizada en el modelo."),
verbatimTextOutput("info_matriz")
)
)
)
),
#Panel de resultados
nav_panel(
title = tags$span(icon("trophy"), "Resultados"),
sidebarLayout(
sidebarPanel(
width = 3,
radioGroupButtons(
inputId = "objetivo",
label = "Selecciona el objetivo:",
choices = c("Objetivo 1", "Objetivo 2", "Objetivo 3", "Objetivo 4"),
selected = "Objetivo 1",
status = "primary",
direction = "vertical",
size = "lg"
),
br(),
div(
style = "background: #f8f9fa; padding: 15px; border-radius: 8px;",
h5("Descripción del Objetivo"),
textOutput("descripcion_objetivo")
)
),
mainPanel(
width = 9,
card(
card_header(textOutput("titulo_resultado")),
DTOutput("tabla_resultados")
)
)
)
)
)
#Server
server<- function(input, output, session) {
# Cargar página con animación
waiter_show(html = spin_fading_circles(), color = "#E60026")
Sys.sleep(1)
waiter_hide()
# Métricas del dashboard principal
metricas <- calcular_metricas_resumen()
output$total_clientes <- renderText({ format(metricas$clientes, big.mark = ",") })
output$total_productos <- renderText({ format(metricas$productos, big.mark = ",") })
output$total_tickets <- renderText({ format(metricas$tickets, big.mark = ",") })
output$periodo_analisis <- renderText({ metricas$periodo })
# Gráficos principales mejorados con plotly
output$cantidad_articulos <- renderPlot({
tickets_enc %>%
group_by(num_ticket, id_cliente_enc) %>%
summarise(ArticulosPorCompra = n(), .groups = "drop") %>%
ggplot(aes(x = ArticulosPorCompra)) +
geom_histogram(color = "#E60026", fill = "#E60026", binwidth = 1, alpha = 0.6) +
labs(title = "Cantidad de artículos que se llevan por compra",
y = "Cantidad de tickets",
x = "Artículos por ticket") +
theme_minimal()
})
output$top10_articulos <- renderPlot({
top_articulos <- tickets_enc %>%
group_by(cod_est) %>%
summarise(Cantidad = n(), .groups = "drop") %>%
arrange(desc(Cantidad)) %>%
head(10) %>%
left_join(maestroestr, by = "cod_est")
ggplot(top_articulos, aes(x = Cantidad, y = reorder(descripcion, Cantidad))) +
geom_col(fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Top 10 artículos más comprados",
x = "Artículo",
y = "Cantidad de veces comprado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$actividad_clientes <- renderPlot({
tickets_enc3 <- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(primera_compra = min(dia),
ultima_compra = max(dia)) %>%
mutate(duracion_dias = as.numeric(ultima_compra - primera_compra)) %>%
arrange(desc(duracion_dias))
ggplot(tickets_enc3, aes(x = duracion_dias)) +
geom_histogram(binwidth = 10, fill = "#E60026", color = "#E60026", alpha = 0.6) +
scale_x_continuous(breaks = seq(0, 90, by = 10)) +
labs(title = "Tiempo de actividad de los clientes",
x = "Duración entre primera y última compra (días)",
y = "Cantidad de clientes") +
theme_minimal()
})
output$frecuencia_de_compra <- renderPlot({
intervalos <- tickets_enc %>%
arrange(id_cliente_enc, dia) %>%
group_by(id_cliente_enc) %>%
mutate(intervalo = as.numeric(difftime(dia, lag(dia), units = "days"))) %>%
filter(!is.na(intervalo)) %>%
summarise(media_intervalo = mean(intervalo), .groups = "drop")
ggplot(intervalos, aes(x = media_intervalo)) +
geom_histogram(binwidth = 1, color = "#E60026", fill = "#E60026", alpha = 0.6) +
labs(title = "Media de días entre compras por cliente",
x = "Media de días entre compras",
y = "Cantidad de clientes") +
coord_cartesian(xlim = c(0, 8)) +
theme_minimal()
})
output$dias_semana <- renderPlot({
tickets_encF <- tickets_enc %>% mutate(DiaSemana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1)) %>% group_by(DiaSemana) %>% summarise(CantidadProductos = n())
tickets_encF2 <- tickets_encF %>%
mutate(
porcentaje = CantidadProductos / sum(CantidadProductos) * 100,
etiqueta = paste0(DiaSemana, " (", round(porcentaje, 1), "%)")
)
ggplot(tickets_encF2, aes(x = "", y = CantidadProductos, fill = DiaSemana)) +
geom_col(color = "white") +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Proporción de productos comprados por día de la semana") +
geom_label_repel(aes(label = etiqueta),
position = position_stack(vjust = 0.5),
show.legend = FALSE,
segment.color = "grey50", size = 4) +
scale_fill_manual(values = c( "#E60026","#0033A0","#80C342","#5B9BD5","#666666","#FFB900","#0072CE"))
})
output$productos_mas_frecuentes_mes <- renderPlot({
tickets_enc6 <- tickets_enc %>%
left_join(maestroestr, by = "cod_est")
productos_mes <- tickets_enc6 %>%
mutate(Mes = month(dia, label = TRUE)) %>%
group_by(Mes, descripcion, id_cliente_enc) %>%
summarise(total = n(), .groups = "drop")
top_productos <- productos_mes %>%
group_by(Mes) %>%
slice_max(order_by = total, n = 5)
ggplot(top_productos, aes(x = reorder(descripcion, total), y = total, fill = descripcion)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ Mes, scales = "free_x") +
scale_fill_manual(values = c("#E60026", "#0033A0", "#80C342", "#5B9BD5", "#666666",
"grey", "#FFB900", "#0072CE", "#C8102E", "grey3",
"#A1D490", "#FFA07A", "#9ACD32", "#A0522D", "yellow4", "#4B0082")) +
labs(title = "Top productos más comprados por mes",
x = "Producto",
y = "Número de tickets") +
theme_minimal() +
coord_flip()
})
output$grafico_evolucion <- renderPlot({
tickets_mes <- tickets_enc %>%
mutate(mes = floor_date(dia, "month")) %>%
count(mes)
ggplot(tickets_mes, aes(x = mes, y = n)) +
geom_line(color = "#E60026", size = 1) +
labs(title = "Evolución mensual del número de compras",
x = "Mes", y = "Número de tickets") +
theme_minimal()
})
output$grafico_fidelizacion <- renderPlot({
tickets_enc4 <- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(primera = min(dia),
ultima = max(dia),
n_compras = n_distinct(num_ticket)) %>%
mutate(duracion = as.numeric(ultima - primera))
ggplot(tickets_enc4, aes(x = duracion, y = n_compras)) +
geom_point(alpha = 0.5, color = "#E60026") +
labs(title = "Compras vs Tiempo de Actividad de los Clientes",
x = "Días entre primera y última compra",
y = "Cantidad de compras") +
theme_minimal()
})
# Análisis de clústeres
output$cluster_size <- renderText({
if(input$cluster != "") {
size <- clientes_clusterizados %>%
filter(kmeans_cluster == input$cluster) %>%
nrow()
paste("Tamaño del clúster:", format(size, big.mark = ","), "clientes")
}
})
output$cluster_description <- renderText({
descripciones <- c(
"1" = "Clientes ocasionales con baja frecuencia de compra",
"2" = "Clientes regulares con comportamiento estándar",
"3" = "Clientes frecuentes con alta fidelidad",
"4" = "Clientes premium con alto valor de compra"
)
if(input$cluster != "" && input$cluster %in% names(descripciones)) {
descripciones[[input$cluster]]
}
})
# Información de la matriz
output$info_matriz <- renderText({
if(exists("matriz")) {
paste("Dimensiones de la matriz:", paste(dim(matriz), collapse = " x "),
"\nTipo de objeto:", class(matriz)[1],
"\nMemoria utilizada:", format(object.size(matriz), units = "Mb"))
} else {
"Matriz no disponible"
}
})
# Descripciones de objetivos
output$descripcion_objetivo <- renderText({
descripciones <- c(
"obj1" = "Análisis de segmentación de clientes y patrones de comportamiento.",
"obj2" = "Sistema de recomendación personalizada basado en historial de compras.",
"obj3" = "Optimización de inventario y predicción de demanda.",
"obj4" = "Análisis de rentabilidad y estrategias de marketing dirigido."
)
descripciones[[input$objetivo]]
})
output$titulo_resultado <- renderText({
titulos <- c(
"Objetivo 1" = "Resultados - Articulo Promocionado",
"Objetivo 2" = "Resultados - Otros como tú han comprado",
"Objetivo 3" = "Resultados - Oferta para ti",
"Objetivo 4" = "Resultados - Quizás te hayas olvidado"
)
titulos[[input$objetivo]]
})
#Tabla de resultados
output$tabla_resultados<- renderDT({
tabla<- switch(input$objetivo,
"Objetivo 1" = data.frame(Métrica = c("Precisión", "Recall", "F1-Score"),
Valor = c(0.85, 0.78, 0.81)),
"Objetivo 2" = resultadosO2,
"Objetivo 3" = resultadosO3,
"Objetivo 4" = data.frame(Segmento = c("Premium", "Regular"),
ROI = c("25%", "15%"))
)
datatable(tabla,
options = list(pageLength = 10, dom = 'tip'),
class = 'cell-border stripe') %>%
formatStyle(columns = colnames(tabla), backgroundColor = '#f8f9fa')
})
#Tablas de métricas de modelado
output$tabla_metricas_topNList <- renderDT({
datos_ejemplo <- data.frame(
Algoritmo = c("UBCF", "IBCF", "Popular", "Random"),
Precision = c(0.15, 0.12, 0.08, 0.02),
Recall = c(0.25, 0.20, 0.15, 0.05),
F1 = c(0.19, 0.15, 0.11, 0.03)
)
datatable(datos_ejemplo,
options = list(pageLength = 10, dom = 'tip'),
class = 'cell-border stripe') %>%
formatRound(columns = c('Precision', 'Recall', 'F1'), digits = 3)
})
output$tabla_metricas_ratings <- renderDT({
datos_ejemplo <- data.frame(
Algoritmo = c("SVD", "NMF", "Baseline", "KNN"),
RMSE = c(0.95, 1.02, 1.15, 1.08),
MAE = c(0.75, 0.82, 0.89, 0.85)
)
datatable(datos_ejemplo,
options = list(pageLength = 10, dom = 'tip'),
class = 'cell-border stripe') %>%
formatRound(columns = c('RMSE', 'MAE'), digits = 3)
})
}
#Ejecutar la aplicación
shinyApp(ui = ui, server = server)
library(tidyverse)
library(lubridate)
library(rsparse)
library(dplyr)
library(Matrix)
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
matriz_reducida <- readRDS("MatrizSuperReducida.RDS")
# Como carga dataframe convertimos los NAs en 0 y cambio el formato
matriz_reducida[is.na(matriz_reducida)] <- 0
matriz_reducida <- as(matriz_reducida, "matrix")
matriz_reducida <- as(matriz_reducida, "dgCMatrix")
matriz_reducida@x[matriz_reducida@x >= 1] <- 1
obj4 <- objetivos[[4]]$obj
colnames(matriz_reducida) <- sub("^.", "", colnames(matriz_reducida))
matriz_sparse_filt <- matriz_reducida[rownames(matriz_reducida) %in% obj4, ]
matriz_sparse_filt <- as(matriz_sparse_filt, "dgCMatrix")
matriz_reducida <- as(matriz_reducida, "dgCMatrix")
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# Verificar que los clientes objetivo estén presentes en la matriz de interacciones
clientes_en_matriz <- intersect(obj4, rownames(matriz_reducida))
length(clientes_en_matriz)
modelo_wrmf_o4 <- WRMF$new(rank = 10L,
lambda = 0.1,
feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_reducida,
n_iter = 1000L,
convergence_tol = 1e-6)
productos_matriz <- colnames(matriz_reducida)
not_recommend_df <- matrix(0,
nrow = nrow(matriz_reducida),
ncol = ncol(matriz_reducida))
rownames(not_recommend_df) <- rownames(matriz_reducida)
colnames(not_recommend_df) <- productos_matriz
# Para cada cliente, marcar con 1 los productos de su último ticket para excluirlos de recomendaciones
for (cliente in clientes_en_matriz) {
# Extraer productos comprados en el último ticket del cliente
productos_ultimo_ticket <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
# Mantener solo productos que están en la matriz de productos
productos_validos <- intersect(productos_ultimo_ticket, productos_matriz)
if (length(productos_validos) > 0) {
# Marcar con 1 en la matriz de exclusión
not_recommend_df[cliente, productos_validos] <- 1
cat("Cliente", cliente, "tiene", length(productos_validos), "productos marcados como no recomendables\n")
} else {
cat("Cliente", cliente, "no tiene productos para excluir\n")
}
}
not_recommend_matrix <- as(not_recommend_df, "dgCMatrix")
# Predecir recomendaciones para clientes objetivo,
# excluyendo productos comprados recientemente
preds_o4 <- modelo_wrmf_o4$predict(
not_recommend_matrix[clientes_en_matriz, ],
k = 1,
not_recommend = not_recommend_matrix[clientes_en_matriz, ]
)
predicciones <- as.data.frame(attr(preds_o4, "ids"))
predicciones$clientes <- rownames(predicciones)
rownames(predicciones) <- NULL
predicciones <- predicciones %>%
select(clientes, V1)
predicciones <- predicciones %>%
left_join(maestro, by = c("V1" = "cod_est"))
colnames(predicciones) <- c("CLIENTES", "COD_PRODUCTO", "DESCRIPCION")
predicciones
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
matriz_reducida <- readRDS("MatrizSuperReducida.RDS")
# Como carga dataframe convertimos los NAs en 0 y cambio el formato
matriz_reducida[is.na(matriz_reducida)] <- 0
matriz_reducida <- as(matriz_reducida, "matrix")
matriz_reducida <- as(matriz_reducida, "dgCMatrix")
matriz_reducida@x[matriz_reducida@x >= 1] <- 1
# -------------------------------------------
# PREPARACIÓN DE DATOS PARA EL OBJETIVO 4
# -------------------------------------------
obj4 <- objetivos[[4]]$obj
colnames(matriz_reducida) <- sub("^.", "", colnames(matriz_reducida))
matriz_sparse_filt <- matriz_reducida[rownames(matriz_reducida) %in% obj4, ]
matriz_sparse_filt <- as(matriz_sparse_filt, "dgCMatrix")
matriz_reducida <- as(matriz_reducida, "dgCMatrix")
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# -------------------------------------------
# VERIFICACIÓN DE CLIENTES Y ENTRENAMIENTO DEL MODELO
# -------------------------------------------
# Verificar que los clientes objetivo estén presentes en la matriz de interacciones
clientes_en_matriz <- intersect(obj4, rownames(matriz_reducida))
length(clientes_en_matriz)
modelo_wrmf_o4 <- WRMF$new(rank = 10L,
lambda = 0.1,
feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_reducida,
n_iter = 1000L,
convergence_tol = 1e-6)
# -------------------------------------------
# EXCLUSIÓN DE PRODUCTOS YA COMPRADOS RECIENTEMENTE
# -------------------------------------------
productos_matriz <- colnames(matriz_reducida)
not_recommend_df <- matrix(0,
nrow = nrow(matriz_reducida),
ncol = ncol(matriz_reducida))
rownames(not_recommend_df) <- rownames(matriz_reducida)
colnames(not_recommend_df) <- productos_matriz
# Para cada cliente, marcar con 1 los productos de su último ticket para excluirlos de recomendaciones
for (cliente in clientes_en_matriz) {
# Extraer productos comprados en el último ticket del cliente
productos_ultimo_ticket <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
# Mantener solo productos que están en la matriz de productos
productos_validos <- intersect(productos_ultimo_ticket, productos_matriz)
if (length(productos_validos) > 0) {
# Marcar con 1 en la matriz de exclusión
not_recommend_df[cliente, productos_validos] <- 1
cat("Cliente", cliente, "tiene", length(productos_validos), "productos marcados como no recomendables\n")
} else {
cat("Cliente", cliente, "no tiene productos para excluir\n")
}
}
not_recommend_matrix <- as(not_recommend_df, "dgCMatrix")
# -------------------------------------------
# GENERACIÓN DE RECOMENDACIONES
# -------------------------------------------
# Predecir recomendaciones para clientes objetivo,
# excluyendo productos comprados recientemente
preds_o4 <- modelo_wrmf_o4$predict(
not_recommend_matrix[clientes_en_matriz, ],
k = 1,
not_recommend = not_recommend_matrix[clientes_en_matriz, ]
)
# -------------------------------------------
# PROCESAMIENTO DE RESULTADOS
# -------------------------------------------
predicciones <- as.data.frame(attr(preds_o4, "ids"))
predicciones$clientes <- rownames(predicciones)
rownames(predicciones) <- NULL
predicciones <- predicciones %>%
select(clientes, V1)
predicciones <- predicciones %>%
left_join(maestro, by = c("V1" = "cod_est"))
colnames(predicciones) <- c("CLIENTES", "COD_PRODUCTO", "DESCRIPCION")
predicciones
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
matriz_reducida <- readRDS("MatrizSuperReducida.RDS")
# Como carga dataframe convertimos los NAs en 0 y cambio el formato
matriz_reducida[is.na(matriz_reducida)] <- 0
matriz_reducida <- as(matriz_reducida, "matrix")
matriz_reducida <- as(matriz_reducida, "dgCMatrix")
matriz_reducida@x[matriz_reducida@x >= 1] <- 1
obj4 <- objetivos[[4]]$obj
colnames(matriz_reducida) <- sub("^.", "", colnames(matriz_reducida))
matriz_sparse_filt <- matriz_reducida[rownames(matriz_reducida) %in% obj4, ]
matriz_sparse_filt <- as(matriz_sparse_filt, "dgCMatrix")
matriz_reducida <- as(matriz_reducida, "dgCMatrix")
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# Verificar que los clientes objetivo estén presentes en la matriz de interacciones
clientes_en_matriz <- intersect(obj4, rownames(matriz_reducida))
length(clientes_en_matriz)
modelo_wrmf_o4 <- WRMF$new(rank = 10L,
lambda = 0.1,
feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_reducida,
n_iter = 1000L,
convergence_tol = 1e-6)
productos_matriz <- colnames(matriz_reducida)
not_recommend_df <- matrix(0,
nrow = nrow(matriz_reducida),
ncol = ncol(matriz_reducida))
rownames(not_recommend_df) <- rownames(matriz_reducida)
colnames(not_recommend_df) <- productos_matriz
# Para cada cliente, marcar con 1 los productos de su último ticket para excluirlos de recomendaciones
for (cliente in clientes_en_matriz) {
# Extraer productos comprados en el último ticket del cliente
productos_ultimo_ticket <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
# Mantener solo productos que están en la matriz de productos
productos_validos <- intersect(productos_ultimo_ticket, productos_matriz)
if (length(productos_validos) > 0) {
# Marcar con 1 en la matriz de exclusión
not_recommend_df[cliente, productos_validos] <- 1
cat("Cliente", cliente, "tiene", length(productos_validos), "productos marcados como no recomendables\n")
} else {
cat("Cliente", cliente, "no tiene productos para excluir\n")
}
}
not_recommend_matrix <- as(not_recommend_df, "dgCMatrix")
# Predecir recomendaciones para clientes objetivo,
# excluyendo productos comprados recientemente
preds_o4 <- modelo_wrmf_o4$predict(
not_recommend_matrix[clientes_en_matriz, ],
k = 1,
not_recommend = not_recommend_matrix[clientes_en_matriz, ]
)
predicciones <- as.data.frame(attr(preds_o4, "ids"))
predicciones$clientes <- rownames(predicciones)
rownames(predicciones) <- NULL
predicciones <- predicciones %>%
select(clientes, V1)
predicciones <- predicciones %>%
left_join(maestro, by = c("V1" = "cod_est"))
colnames(predicciones) <- c("CLIENTES", "COD_PRODUCTO", "DESCRIPCION")
predicciones
write.csv(predicciones, "Resultados/predicciones_objetivo_4.csv", row.names = FALSE)
