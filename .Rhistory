theme_minimal()
})
output$top10_articulos<- renderPlot({
top_articulos<- tickets_enc %>%
group_by(cod_est) %>%
summarise(Cantidad = n(), .groups = "drop") %>%
arrange(desc(Cantidad)) %>%
head(10) %>%
left_join(maestroestr, by = "cod_est")
ggplot(top_articulos, aes(x = Cantidad, y = reorder(descripcion, Cantidad))) +
geom_col(fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Top 10 artículos más comprados",
x = "Artículo",
y = "Cantidad de veces comprado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$actividad_clientes<- renderPlot({
duraciones<- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
primera_compra = min(dia),
ultima_compra = max(dia),
duracion_dias = as.numeric(ultima_compra - primera_compra),
.groups = "drop")
ggplot(duraciones, aes(x = duracion_dias)) +
geom_histogram(binwidth = 30, fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Tiempo de actividad de los clientes",
x = "Duración entre primera y última compra (días)",
y = "Número de clientes") +
theme_minimal()
})
output$frecuencia_de_compra<- renderPlot({
intervalos<- tickets_enc %>%
arrange(id_cliente_enc, dia) %>%
group_by(id_cliente_enc) %>%
mutate(intervalo = as.numeric(difftime(dia, lag(dia), units = "days"))) %>%
filter(!is.na(intervalo)) %>%
summarise(media_intervalo = mean(intervalo), .groups = "drop")
ggplot(intervalos, aes(x = media_intervalo)) +
geom_histogram(binwidth = 1, color = "#E60026", fill = "#E60026", alpha = 0.6) +
labs(title = "Media de días entre compras por cliente",
x = "Media de días entre compras",
y = "Cantidad de clientes") +
coord_cartesian(xlim = c(0, 8)) +
theme_minimal()
})
output$dias_semana<- renderPlot({
tickets_encF<- tickets_enc %>% mutate(DiaSemana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1)) %>% group_by(DiaSemana) %>% summarise(CantidadProductos = n())
tickets_encF2<- tickets_encF %>%
mutate(
porcentaje = CantidadProductos / sum(CantidadProductos) * 100,
etiqueta = paste0(DiaSemana, " (", round(porcentaje, 1), "%)")
)
grafico5<- ggplot(tickets_encF2, aes(x = "", y = CantidadProductos, fill = DiaSemana)) +
geom_col(color = "white") +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Proporción de productos comprados por día de la semana") +
geom_label_repel(aes(label = etiqueta),
position = position_stack(vjust = 0.5),
show.legend = FALSE,
segment.color = "grey50", size = 4) +
scale_fill_manual(values = c( "#E60026","#0033A0","#80C342","#5B9BD5","#666666","#FFB900","#0072CE"))
})
output$productos_mas_frecuentes_mes<- renderPlot({
tickets_enc6<- tickets_enc %>%
left_join(maestroestr, by = "cod_est")
productos_mes<- tickets_enc6 %>%
mutate(Mes = lubridate::month(dia, label = TRUE)) %>%  # Mes con nombre
group_by(Mes, descripcion, id_cliente_enc) %>%
summarise(total = n(), .groups = "drop")
top_productos<- productos_mes %>%
group_by(Mes) %>%
slice_max(order_by = total, n = 5)
ggplot(top_productos, aes(x = reorder(descripcion, total), y = total, fill = descripcion)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ Mes, scales = "free_x") +
scale_fill_manual(values = c("#E60026", "#0033A0", "#80C342", "#5B9BD5", "#666666",
"grey", "#FFB900", "#0072CE", "#C8102E", "grey3",
"#A1D490", "#FFA07A", "#9ACD32", "#A0522D", "yellow4", "#4B0082")) +
labs(title = "Top productos más comprados por mes",
x = "Producto",
y = "Número de tickets") +
theme_minimal() +
coord_flip()
})
}
#Ejecutar la app
shinyApp(ui = ui, server = server)
#Server
server<- function(input, output) {
output$cantidad_articulos<- renderPlot({
tickets_enc %>%
group_by(num_ticket, id_cliente_enc) %>%
summarise(ArticulosPorCompra = n(), .groups = "drop") %>%
ggplot(aes(x = ArticulosPorCompra)) +
geom_histogram(color = "#E60026", fill = "#E60026", binwidth = 1, alpha = 0.6) +
labs(title = "Cantidad de artículos que se llevan por compra",
y = "Cantidad de tickets",
x = "Artículos por ticket") +
theme_minimal()
})
output$top10_articulos<- renderPlot({
top_articulos<- tickets_enc %>%
group_by(cod_est) %>%
summarise(Cantidad = n(), .groups = "drop") %>%
arrange(desc(Cantidad)) %>%
head(10) %>%
left_join(maestroestr, by = "cod_est")
ggplot(top_articulos, aes(x = Cantidad, y = reorder(descripcion, Cantidad))) +
geom_col(fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Top 10 artículos más comprados",
x = "Artículo",
y = "Cantidad de veces comprado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$actividad_clientes<- renderPlot({
duraciones<- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
primera_compra = min(dia),
ultima_compra = max(dia),
duracion_dias = as.numeric(ultima_compra - primera_compra),
.groups = "drop")
ggplot(duraciones, aes(x = duracion_dias)) +
geom_histogram(binwidth = 30, fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Tiempo de actividad de los clientes",
x = "Duración entre primera y última compra (días)",
y = "Número de clientes") +
theme_minimal()
})
output$frecuencia_de_compra<- renderPlot({
intervalos<- tickets_enc %>%
arrange(id_cliente_enc, dia) %>%
group_by(id_cliente_enc) %>%
mutate(intervalo = as.numeric(difftime(dia, lag(dia), units = "days"))) %>%
filter(!is.na(intervalo)) %>%
summarise(media_intervalo = mean(intervalo), .groups = "drop")
ggplot(intervalos, aes(x = media_intervalo)) +
geom_histogram(binwidth = 1, color = "#E60026", fill = "#E60026", alpha = 0.6) +
labs(title = "Media de días entre compras por cliente",
x = "Media de días entre compras",
y = "Cantidad de clientes") +
coord_cartesian(xlim = c(0, 8)) +
theme_minimal()
})
output$dias_semana<- renderPlot({
tickets_encF<- tickets_enc %>% mutate(DiaSemana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1)) %>% group_by(DiaSemana) %>% summarise(CantidadProductos = n())
tickets_encF2<- tickets_encF %>%
mutate(
porcentaje = CantidadProductos / sum(CantidadProductos) * 100,
etiqueta = paste0(DiaSemana, " (", round(porcentaje, 1), "%)")
)
ggplot(tickets_encF2, aes(x = "", y = CantidadProductos, fill = DiaSemana)) +
geom_col(color = "white") +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Proporción de productos comprados por día de la semana") +
geom_label_repel(aes(label = etiqueta),
position = position_stack(vjust = 0.5),
show.legend = FALSE,
segment.color = "grey50", size = 4) +
scale_fill_manual(values = c( "#E60026","#0033A0","#80C342","#5B9BD5","#666666","#FFB900","#0072CE"))
})
output$productos_mas_frecuentes_mes<- renderPlot({
tickets_enc6<- tickets_enc %>%
left_join(maestroestr, by = "cod_est")
productos_mes<- tickets_enc6 %>%
mutate(Mes = month(dia, label = TRUE)) %>%
group_by(Mes, descripcion, id_cliente_enc) %>%
summarise(total = n(), .groups = "drop")
top_productos<- productos_mes %>%
group_by(Mes) %>%
slice_max(order_by = total, n = 5)
ggplot(top_productos, aes(x = reorder(descripcion, total), y = total, fill = descripcion)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ Mes, scales = "free_x") +
scale_fill_manual(values = c("#E60026", "#0033A0", "#80C342", "#5B9BD5", "#666666",
"grey", "#FFB900", "#0072CE", "#C8102E", "grey3",
"#A1D490", "#FFA07A", "#9ACD32", "#A0522D", "yellow4", "#4B0082")) +
labs(title = "Top productos más comprados por mes",
x = "Producto",
y = "Número de tickets") +
theme_minimal() +
coord_flip()
})
}
#Ejecutar la app
shinyApp(ui = ui, server = server)
#Definir la ui
ui<- page_navbar(
title = "APP Eroski - Reto 04",
nav_panel("Análisis Exploratorio",
navset_tab(
tabPanel("Productos por compra",
p("Este histograma refleja la cantidad de articulos que los clientes se suelen llevar por compra."),
plotOutput("cantidad_articulos")),
tabPanel("Articulos más comprados",
p("Este gráfico de barras muestra los 10 articulos más comprados en general."),
plotOutput(outputId = "top10_articulos")),
tabPanel("Tiempo de actividad de los clientes",
p("En este grafico se ve el tiempo de actividad de los clientes en Eroski, es decir la diferencia entre su primera y última compra."),
plotOutput(outputId = "actividad_clientes")),
tabPanel("Frecuencia de compra",
p("Este gráfico muestra con que frecuencia compran los clientes de media. Es decir cuantos días pasan de media entre compra y compra."),
plotOutput(outputId = "frecuencia_de_compra")),
tabPanel("Día de la semana que más se compra",
p("En este gráfico se ven los días de la semana en los que más suelen comprar los clienes de Eroski."),
plotOutput(outputId = "dias_semana")),
tabPanel("Productos más comprados por meses",
p("En este gráfico se puede ver cuales son los productos más frecuentes cada mes. Teniendo en cuenta que la base de datos solo consta de tres meses."),
plotOutput(outputId = "productos_mas_frecuentes_mes"))
)),
nav_panel("Clústeres",
navset_pill_list("Carácteristicas de los clústeres.",
selectInput(inputId = "cluster", label = "Selecciona el cluster:", choices = unique(clientes_clusterizados$kmeans_cluster), selected = 1)
)),
nav_panel("Modelado",
navset_tab(
tabPanel("topNList",
p("Metricas de la evaluacion de algoritmos con topNList."),
DTOutput(outputId = "tabla_metricas_topNList")),
tabPanel("Ratings",
p("Metricas de la evaluacion de algoritmos con ratings."),
DTOutput(outputId = "tabla_metricas_ratings"))
)),
nav_panel("Resultados",
navset_tab(
tabPanel("Objetivo 1",
p("Resultados del objetivo 1."),
DTOutput(outputId = "resultados_objetivo1")),
tabPanel("Objetivo 2",
p("Resultados del objetivo 2."),
DTOutput(outputId = "resultados_objetivo2")),
tabPanel("Objetivo 3",
p("Resultados del objetivo 3."),
DTOutput(outputId = "resultados_objetivo3")),
tabPanel("Objetivo 4",
p("Resultados del objetivo 4."),
DTOutput(outputId = "resultados_objetivo4"))
))
)
#Server
server<- function(input, output) {
output$cantidad_articulos<- renderPlot({
tickets_enc %>%
group_by(num_ticket, id_cliente_enc) %>%
summarise(ArticulosPorCompra = n(), .groups = "drop") %>%
ggplot(aes(x = ArticulosPorCompra)) +
geom_histogram(color = "#E60026", fill = "#E60026", binwidth = 1, alpha = 0.6) +
labs(title = "Cantidad de artículos que se llevan por compra",
y = "Cantidad de tickets",
x = "Artículos por ticket") +
theme_minimal()
})
output$top10_articulos<- renderPlot({
top_articulos<- tickets_enc %>%
group_by(cod_est) %>%
summarise(Cantidad = n(), .groups = "drop") %>%
arrange(desc(Cantidad)) %>%
head(10) %>%
left_join(maestroestr, by = "cod_est")
ggplot(top_articulos, aes(x = Cantidad, y = reorder(descripcion, Cantidad))) +
geom_col(fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Top 10 artículos más comprados",
x = "Artículo",
y = "Cantidad de veces comprado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$actividad_clientes<- renderPlot({
duraciones<- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
primera_compra = min(dia),
ultima_compra = max(dia),
duracion_dias = as.numeric(ultima_compra - primera_compra),
.groups = "drop")
ggplot(duraciones, aes(x = duracion_dias)) +
geom_histogram(binwidth = 30, fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Tiempo de actividad de los clientes",
x = "Duración entre primera y última compra (días)",
y = "Número de clientes") +
theme_minimal()
})
output$frecuencia_de_compra<- renderPlot({
intervalos<- tickets_enc %>%
arrange(id_cliente_enc, dia) %>%
group_by(id_cliente_enc) %>%
mutate(intervalo = as.numeric(difftime(dia, lag(dia), units = "days"))) %>%
filter(!is.na(intervalo)) %>%
summarise(media_intervalo = mean(intervalo), .groups = "drop")
ggplot(intervalos, aes(x = media_intervalo)) +
geom_histogram(binwidth = 1, color = "#E60026", fill = "#E60026", alpha = 0.6) +
labs(title = "Media de días entre compras por cliente",
x = "Media de días entre compras",
y = "Cantidad de clientes") +
coord_cartesian(xlim = c(0, 8)) +
theme_minimal()
})
output$dias_semana<- renderPlot({
tickets_encF<- tickets_enc %>% mutate(DiaSemana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1)) %>% group_by(DiaSemana) %>% summarise(CantidadProductos = n())
tickets_encF2<- tickets_encF %>%
mutate(
porcentaje = CantidadProductos / sum(CantidadProductos) * 100,
etiqueta = paste0(DiaSemana, " (", round(porcentaje, 1), "%)")
)
ggplot(tickets_encF2, aes(x = "", y = CantidadProductos, fill = DiaSemana)) +
geom_col(color = "white") +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Proporción de productos comprados por día de la semana") +
geom_label_repel(aes(label = etiqueta),
position = position_stack(vjust = 0.5),
show.legend = FALSE,
segment.color = "grey50", size = 4) +
scale_fill_manual(values = c( "#E60026","#0033A0","#80C342","#5B9BD5","#666666","#FFB900","#0072CE"))
})
output$productos_mas_frecuentes_mes<- renderPlot({
tickets_enc6<- tickets_enc %>%
left_join(maestroestr, by = "cod_est")
productos_mes<- tickets_enc6 %>%
mutate(Mes = month(dia, label = TRUE)) %>%
group_by(Mes, descripcion, id_cliente_enc) %>%
summarise(total = n(), .groups = "drop")
top_productos<- productos_mes %>%
group_by(Mes) %>%
slice_max(order_by = total, n = 5)
ggplot(top_productos, aes(x = reorder(descripcion, total), y = total, fill = descripcion)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ Mes, scales = "free_x") +
scale_fill_manual(values = c("#E60026", "#0033A0", "#80C342", "#5B9BD5", "#666666",
"grey", "#FFB900", "#0072CE", "#C8102E", "grey3",
"#A1D490", "#FFA07A", "#9ACD32", "#A0522D", "yellow4", "#4B0082")) +
labs(title = "Top productos más comprados por mes",
x = "Producto",
y = "Número de tickets") +
theme_minimal() +
coord_flip()
})
}
#Ejecutar la app
shinyApp(ui = ui, server = server)
#Definir la ui
ui<- page_navbar(
title = "APP Eroski - Reto 04",
nav_panel("Análisis Exploratorio",
navset_tab(
tabPanel("Productos por compra",
p("Este histograma refleja la cantidad de articulos que los clientes se suelen llevar por compra."),
plotOutput("cantidad_articulos")),
tabPanel("Articulos más comprados",
p("Este gráfico de barras muestra los 10 articulos más comprados en general."),
plotOutput(outputId = "top10_articulos")),
tabPanel("Tiempo de actividad de los clientes",
p("En este grafico se ve el tiempo de actividad de los clientes en Eroski, es decir la diferencia entre su primera y última compra."),
plotOutput(outputId = "actividad_clientes")),
tabPanel("Frecuencia de compra",
p("Este gráfico muestra con que frecuencia compran los clientes de media. Es decir cuantos días pasan de media entre compra y compra."),
plotOutput(outputId = "frecuencia_de_compra")),
tabPanel("Día de la semana que más se compra",
p("En este gráfico se ven los días de la semana en los que más suelen comprar los clienes de Eroski."),
plotOutput(outputId = "dias_semana")),
tabPanel("Productos más comprados por meses",
p("En este gráfico se puede ver cuales son los productos más frecuentes cada mes. Teniendo en cuenta que la base de datos solo consta de tres meses."),
plotOutput(outputId = "productos_mas_frecuentes_mes")),
tabPanel("Evolucion mensual del número de compras",
p("En este gráfico de lineas se ve la evolucion que han tenido las ventas de eroski durante estos tres meses."),
plotOutput(outputId = "grafico_evolucion"))
)),
nav_panel("Clústeres",
navset_pill_list("Carácteristicas de los clústeres.",
selectInput(inputId = "cluster", label = "Selecciona el cluster:", choices = unique(clientes_clusterizados$kmeans_cluster), selected = 1)
)),
nav_panel("Modelado",
navset_tab(
tabPanel("topNList",
p("Metricas de la evaluacion de algoritmos con topNList."),
DTOutput(outputId = "tabla_metricas_topNList")),
tabPanel("Ratings",
p("Metricas de la evaluacion de algoritmos con ratings."),
DTOutput(outputId = "tabla_metricas_ratings"))
)),
nav_panel("Resultados",
navset_tab(
tabPanel("Objetivo 1",
p("Resultados del objetivo 1."),
DTOutput(outputId = "resultados_objetivo1")),
tabPanel("Objetivo 2",
p("Resultados del objetivo 2."),
DTOutput(outputId = "resultados_objetivo2")),
tabPanel("Objetivo 3",
p("Resultados del objetivo 3."),
DTOutput(outputId = "resultados_objetivo3")),
tabPanel("Objetivo 4",
p("Resultados del objetivo 4."),
DTOutput(outputId = "resultados_objetivo4"))
))
)
#Server
server<- function(input, output) {
output$cantidad_articulos<- renderPlot({
tickets_enc %>%
group_by(num_ticket, id_cliente_enc) %>%
summarise(ArticulosPorCompra = n(), .groups = "drop") %>%
ggplot(aes(x = ArticulosPorCompra)) +
geom_histogram(color = "#E60026", fill = "#E60026", binwidth = 1, alpha = 0.6) +
labs(title = "Cantidad de artículos que se llevan por compra",
y = "Cantidad de tickets",
x = "Artículos por ticket") +
theme_minimal()
})
output$top10_articulos<- renderPlot({
top_articulos<- tickets_enc %>%
group_by(cod_est) %>%
summarise(Cantidad = n(), .groups = "drop") %>%
arrange(desc(Cantidad)) %>%
head(10) %>%
left_join(maestroestr, by = "cod_est")
ggplot(top_articulos, aes(x = Cantidad, y = reorder(descripcion, Cantidad))) +
geom_col(fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Top 10 artículos más comprados",
x = "Artículo",
y = "Cantidad de veces comprado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$actividad_clientes<- renderPlot({
duraciones<- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
primera_compra = min(dia),
ultima_compra = max(dia),
duracion_dias = as.numeric(ultima_compra - primera_compra),
.groups = "drop")
ggplot(duraciones, aes(x = duracion_dias)) +
geom_histogram(binwidth = 30, fill = "#E60026", color = "#E60026", alpha = 0.6) +
labs(title = "Tiempo de actividad de los clientes",
x = "Duración entre primera y última compra (días)",
y = "Número de clientes") +
theme_minimal()
})
output$frecuencia_de_compra<- renderPlot({
intervalos<- tickets_enc %>%
arrange(id_cliente_enc, dia) %>%
group_by(id_cliente_enc) %>%
mutate(intervalo = as.numeric(difftime(dia, lag(dia), units = "days"))) %>%
filter(!is.na(intervalo)) %>%
summarise(media_intervalo = mean(intervalo), .groups = "drop")
ggplot(intervalos, aes(x = media_intervalo)) +
geom_histogram(binwidth = 1, color = "#E60026", fill = "#E60026", alpha = 0.6) +
labs(title = "Media de días entre compras por cliente",
x = "Media de días entre compras",
y = "Cantidad de clientes") +
coord_cartesian(xlim = c(0, 8)) +
theme_minimal()
})
output$dias_semana<- renderPlot({
tickets_encF<- tickets_enc %>% mutate(DiaSemana = wday(dia, label = TRUE, abbr = FALSE, week_start = 1)) %>% group_by(DiaSemana) %>% summarise(CantidadProductos = n())
tickets_encF2<- tickets_encF %>%
mutate(
porcentaje = CantidadProductos / sum(CantidadProductos) * 100,
etiqueta = paste0(DiaSemana, " (", round(porcentaje, 1), "%)")
)
ggplot(tickets_encF2, aes(x = "", y = CantidadProductos, fill = DiaSemana)) +
geom_col(color = "white") +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Proporción de productos comprados por día de la semana") +
geom_label_repel(aes(label = etiqueta),
position = position_stack(vjust = 0.5),
show.legend = FALSE,
segment.color = "grey50", size = 4) +
scale_fill_manual(values = c( "#E60026","#0033A0","#80C342","#5B9BD5","#666666","#FFB900","#0072CE"))
})
output$productos_mas_frecuentes_mes<- renderPlot({
tickets_enc6<- tickets_enc %>%
left_join(maestroestr, by = "cod_est")
productos_mes<- tickets_enc6 %>%
mutate(Mes = month(dia, label = TRUE)) %>%
group_by(Mes, descripcion, id_cliente_enc) %>%
summarise(total = n(), .groups = "drop")
top_productos<- productos_mes %>%
group_by(Mes) %>%
slice_max(order_by = total, n = 5)
ggplot(top_productos, aes(x = reorder(descripcion, total), y = total, fill = descripcion)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ Mes, scales = "free_x") +
scale_fill_manual(values = c("#E60026", "#0033A0", "#80C342", "#5B9BD5", "#666666",
"grey", "#FFB900", "#0072CE", "#C8102E", "grey3",
"#A1D490", "#FFA07A", "#9ACD32", "#A0522D", "yellow4", "#4B0082")) +
labs(title = "Top productos más comprados por mes",
x = "Producto",
y = "Número de tickets") +
theme_minimal() +
coord_flip()
})
output$grafico_evolucion<- renderPlot({
tickets_mes<- tickets_enc %>%
mutate(mes = floor_date(dia, "month")) %>%
count(mes)
ggplot(tickets_mes, aes(x = mes, y = n)) +
geom_line(color = "#E60026", size = 1) +
labs(title = "Evolución mensual del número de compras",
x = "Mes", y = "Número de tickets") +
theme_minimal()
})
}
#Ejecutar la app
shinyApp(ui = ui, server = server)
