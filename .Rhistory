x = "PCA1",
y = "PCA2",
color = "Cluster"
) +
theme_minimal()
# ===============================
# 6. Guardar asignación de clusters
# ===============================
clientes_clusterizados <- datos_sin_outliers %>% select(id_cliente_enc, kmeans_cluster)
saveRDS(clientes_clusterizados, "clientes_clusterizados.RDS")
# ===============================
# 7. Crear matriz unificada con clusters
# ===============================
matriz_base <- readRDS("matriz.RDS")
matriz_df   <- matriz_base %>%
as.data.frame() %>%
mutate(id_cliente_enc = rownames(.))
matriz_con_cluster <- matriz_df %>%
inner_join(clientes_clusterizados, by = "id_cliente_enc") %>%
select(id_cliente_enc, kmeans_cluster, everything())
saveRDS(matriz_con_cluster, "matriz_con_cluster.RDS")
# ===============================
# 1. Librerías necesarias
# ===============================
library(dplyr)
library(ggplot2)
library(tidyr)
library(GGally)
library(lubridate)
library(readr)
# ===============================
# 1. Librerías necesarias
# ===============================
library(dplyr)
library(ggplot2)
library(tidyr)
library(GGally)
library(lubridate)
library(readr)
# ===============================
# 2. Cargar datos
# ===============================
# Datos originales necesarios para reconstruir las variables
tickets_enc <- readRDS("tickets_enc.RDS")
clientes_clusterizados <- readRDS("clientes_clusterizados.RDS")
matriz_base <- readRDS("matriz.RDS")
# ===============================
# 3. Preprocesamiento de tickets
# ===============================
tickets_enc <- tickets_enc %>%
mutate(
num_ticket = as.character(num_ticket),
dia = ymd(dia),
num_ticket = paste(num_ticket, id_cliente_enc),
DiaSemana = wday(dia, week_start = 1)
)
# ===============================
# 4. Ingeniería de características por cliente
# ===============================
# Agregar las variables de comportamiento por cliente
datos_clientes <- tickets_enc %>%
group_by(id_cliente_enc) %>%
summarise(
total_productos        = n(),
productos_distintos    = n_distinct(cod_est),
dias_activos           = as.numeric(max(dia) - min(dia)),
compras_por_semana     = ifelse(dias_activos > 0, n() / (dias_activos / 7), n()),
compras_entre_semana   = sum(DiaSemana %in% 1:5),
compras_fin_de_semana  = sum(DiaSemana %in% 6:7)
) %>%
ungroup()
# ===============================
# 5. Reconstruir matriz con clusters + variables
# ===============================
matriz_df <- matriz_base %>%
as.data.frame() %>%
mutate(id_cliente_enc = rownames(.))
# Unir los clusters y las variables de comportamiento por cliente
matriz_con_cluster <- matriz_df %>%
inner_join(clientes_clusterizados, by = "id_cliente_enc") %>%
left_join(datos_clientes, by = "id_cliente_enc")
# Verifica que las variables de comportamiento estén presentes
names(matriz_con_cluster)
# ===============================
# 6. Análisis descriptivo por cluster
# ===============================
summary_tabla <- matriz_con_cluster %>%
group_by(kmeans_cluster) %>%
summarise(
n_clientes              = n(),
total_productos_medio   = mean(total_productos, na.rm = TRUE),
productos_distintos     = mean(productos_distintos, na.rm = TRUE),
dias_activos_promedio   = mean(dias_activos, na.rm = TRUE),
compras_por_semana      = mean(compras_por_semana, na.rm = TRUE),
compras_entre_semana    = mean(compras_entre_semana, na.rm = TRUE),
compras_fin_de_semana   = mean(compras_fin_de_semana, na.rm = TRUE),
prop_fin_semana         = mean(compras_fin_de_semana / (compras_entre_semana + compras_fin_de_semana), na.rm = TRUE)
)
print(summary_tabla)
# ===============================
# 7. Boxplots por variable
# ===============================
variables <- c("total_productos", "productos_distintos", "dias_activos",
"compras_por_semana", "compras_entre_semana", "compras_fin_de_semana")
for (var in variables) {
p <- ggplot(matriz_con_cluster, aes_string(x = "kmeans_cluster", y = var, fill = "kmeans_cluster")) +
geom_boxplot(alpha = 0.7) +
labs(
title = paste("Distribución de", var, "por Cluster"),
x = "Cluster",
y = var
) +
theme_minimal() +
theme(legend.position = "none")
print(p)
}
# ===============================
# 8. Perfiles promedio por cluster (gráfico resumen)
# ===============================
promedios_long <- matriz_con_cluster %>%
group_by(kmeans_cluster) %>%
summarise(across(all_of(variables), ~mean(.x, na.rm = TRUE))) %>%
pivot_longer(-kmeans_cluster, names_to = "variable", values_to = "valor")
ggplot(promedios_long, aes(x = variable, y = valor, fill = kmeans_cluster)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Promedio de Variables por Cluster",
x = "Variable",
y = "Valor Promedio"
) +
theme_minimal()
# ===============================
# 9. Correlaciones dentro de cada cluster
# ===============================
for (i in unique(matriz_con_cluster$kmeans_cluster)) {
datos_cluster <- matriz_con_cluster %>%
filter(kmeans_cluster == i) %>%
select(all_of(variables)) %>%
drop_na()
print(paste("Correlaciones - Cluster", i))
print(ggpairs(datos_cluster, title = paste("Correlaciones en Cluster", i)))
}
# ===============================
# 10. Top clientes por total de productos
# ===============================
top_clientes <- matriz_con_cluster %>%
group_by(kmeans_cluster) %>%
slice_max(total_productos, n = 5, with_ties = FALSE) %>%
arrange(kmeans_cluster, desc(total_productos)) %>%
select(kmeans_cluster, id_cliente_enc, total_productos, compras_por_semana)
print(top_clientes)
# ===============================
# 11. Estadísticas extendidas por cluster
# ===============================
summary_extendido<- matriz_con_cluster %>%
group_by(kmeans_cluster) %>%
summarise(across(all_of(variables),
list(media = ~mean(.x, na.rm = TRUE),
mediana = ~median(.x, na.rm = TRUE),
sd = ~sd(.x, na.rm = TRUE)),
.names = "{.col}_{.fn}"))
print(summary_extendido)
View(summary_tabla)
View(summary_extendido)
if(!requireNamespace("recommenderlab", quietly = TRUE)) {
install.packages("recommenderlab")
}
if(!requireNamespace("rsparse", quietly = TRUE)) {
install.packages("rsparse")
}
if(!requireNamespace("Matrix", quietly = TRUE)) {
install.packages("Matrix")
}
if(!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(Matrix)
library(dplyr)
#1. Cargar datos
data<- readRDS("matriz.RDS")
if(!requireNamespace("recommenderlab", quietly = TRUE)) {
install.packages("recommenderlab")
}
if(!requireNamespace("recommenderlab", quietly = TRUE)) {
install.packages("recommenderlab")
}
if(!requireNamespace("rsparse", quietly = TRUE)) {
install.packages("rsparse")
}
if(!requireNamespace("Matrix", quietly = TRUE)) {
install.packages("Matrix")
}
if(!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(Matrix)
library(dplyr)
#1. Cargar datos
data<- readRDS("matriz.RDS")
objetivos<- readRDS("objetivos.RDS")
clientes_objetivo<- objetivos$objetivo2$obj
productos<- readRDS("maestroestr.RDS")
#2. Examinar datos y tipos de columnas
str(data)
summary(data)
class(data)
dim(data)
str(clientes_objetivo)
summary(clientes_objetivo)
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
#4. Entrenar modelo ALS
set.seed(7)
modelo_ALS<- WRMF$new(rank = 10L, lambda = 0.1, feedback = "implicit")
modelo_ALS$fit_transform(matriz_sparse)
#5. Obtener el índice (en que fila estan) de los clientes objetivo en la matriz
id_usuarios<- match(clientes_objetivo, rownames(matriz))
#6. Hacer predicciones de productos
predicciones<- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], k = 1)
productos_recomendados<- colnames(matriz)[predicciones]
#Resultado
resultado<- data.frame(cliente = clientes_objetivo,
producto_recomendado = productos_recomendados)
#Asignar el nombre del producto
resultado$producto_recomendado<- sub("^X", "", resultado$producto_recomendado)
resultado_final<- merge(resultado,
productos,
by.x = "producto_recomendado",
by.y = "cod_est",
all.x = TRUE)
resultado_final<- resultado_final[, c("cliente", "producto_recomendado", "descripcion")]
resultado_final
clientes_clusterizados <- readRDS("C:/Users/Uxue Duran Nuño/OneDrive - Mondragon Unibertsitatea/Casos Prácticos I/Reto 4/retoGit/RETO_04_NARANJA/clientes_clusterizados.RDS")
matriz_con_cluster <- readRDS("C:/Users/Uxue Duran Nuño/OneDrive - Mondragon Unibertsitatea/Casos Prácticos I/Reto 4/retoGit/RETO_04_NARANJA/matriz_con_cluster.RDS")
if(!requireNamespace("recommenderlab", quietly = TRUE)) {
install.packages("recommenderlab")
}
if(!requireNamespace("rsparse", quietly = TRUE)) {
install.packages("rsparse")
}
if(!requireNamespace("Matrix", quietly = TRUE)) {
install.packages("Matrix")
}
if(!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(Matrix)
library(dplyr)
#1. Cargar datos
data<- readRDS("matriz.RDS")
objetivos<- readRDS("objetivos.RDS")
clientes_objetivo<- objetivos$objetivo2$obj
productos<- readRDS("maestroestr.RDS")
#2. Examinar datos y tipos de columnas
str(data)
summary(data)
class(data)
dim(data)
str(clientes_objetivo)
summary(clientes_objetivo)
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
#4. Entrenar modelo ALS
set.seed(7)
modelo_ALS<- WRMF$new(rank = 10L, lambda = 0.1, feedback = "implicit")
modelo_ALS$fit_transform(matriz_sparse)
#5. Obtener el índice (en que fila estan) de los clientes objetivo en la matriz
id_usuarios<- match(clientes_objetivo, rownames(matriz))
#6. Hacer predicciones de productos
predicciones<- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], k = 1)
productos_recomendados<- colnames(matriz)[predicciones]
#Resultado
resultado<- data.frame(cliente = clientes_objetivo,
producto_recomendado = productos_recomendados)
#Asignar el nombre del producto
resultado$producto_recomendado<- sub("^X", "", resultado$producto_recomendado)
resultado_final<- merge(resultado,
productos,
by.x = "producto_recomendado",
by.y = "cod_est",
all.x = TRUE)
resultado_final<- resultado_final[, c("cliente", "producto_recomendado", "descripcion")]
resultado_final
scores_matrix <- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], type = "score")
View(resultado_final)
View(resultado_final)
dim(matriz)
if(!requireNamespace("recommenderlab", quietly = TRUE)) {
install.packages("recommenderlab")
}
if(!requireNamespace("rsparse", quietly = TRUE)) {
install.packages("rsparse")
}
if(!requireNamespace("Matrix", quietly = TRUE)) {
install.packages("Matrix")
}
if(!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(Matrix)
library(dplyr)
#1. Cargar datos
data<- readRDS("matriz.RDS")
objetivos<- readRDS("objetivos.RDS")
clientes_objetivo<- objetivos$objetivo2$obj
productos<- readRDS("maestroestr.RDS")
#2. Examinar datos y tipos de columnas
str(data)
summary(data)
class(data)
dim(data)
str(clientes_objetivo)
summary(clientes_objetivo)
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
#4. Entrenar modelo ALS
set.seed(7)
modelo_ALS<- WRMF$new(rank = 10L, lambda = 0.1, feedback = "implicit")
modelo_ALS$fit_transform(matriz_sparse)
#5. Obtener el índice (en que fila estan) de los clientes objetivo en la matriz
id_usuarios<- match(clientes_objetivo, rownames(matriz))
#6. Hacer predicciones de productos
predicciones<- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], k = 1)
productos_recomendados<- colnames(matriz)[predicciones]
#Resultado
resultado<- data.frame(cliente = clientes_objetivo,
producto_recomendado = productos_recomendados)
#Asignar el nombre del producto
resultado$producto_recomendado<- sub("^X", "", resultado$producto_recomendado)
resultado_final<- merge(resultado,
productos,
by.x = "producto_recomendado",
by.y = "cod_est",
all.x = TRUE)
resultado_final<- resultado_final[, c("cliente", "producto_recomendado", "descripcion")]
resultado_final
#1. Cargar datos
data<- readRDS("matriz.RDS")
sum(is.na(data))
#1. Cargar datos
data<- readRDS("matriz.RDS")
sum(is.na(data))
data
View(data)
sum(data == 0)
sum(data == 0)/nrow(data) * ncol(data)
sum(data == 0)/(nrow(data) * ncol(data))
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(dplyr)
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(dplyr)
#Cargar matriz de datos
data<- readRDS("matriz.RDS")
#Examinar datos
str(data)
dim(data)
class(data)
#Convertir a realRatingMatrix
matriz<- as(data, "realRatingMatrix")
#Train y test
eval_scheme<- evaluationScheme(matriz,
method = "split",
train = 0.8,
given = 10,
goodRating = 2) #Lo que se considera bueno y malo (es decir si el rango es de 1-5, el goodrating seria 2.)
#Get Data
getdata<- getData(eval_scheme)
#POPULAR
modelo_POPULAR_ratings<- Recommender(getData(eval_scheme, "train"), "POPULAR", param = NULL)
predicciones_rating<- predict(modelo_POPULAR_ratings, getData(eval_scheme, "known"), type = "ratings")
prediccion_rating_matriz<- as(predicciones_rating, "matrix")
#RANDOM
modelo_RANDOM_ratings<- Recommender(getData(eval_scheme, "train"), "random", param = NULL)
predicciones_rating2<- predict(modelo_RANDOM_ratings, getData(eval_scheme, "known"), type = "ratings")
prediccion_rating_matriz2<- as(predicciones_rating2, "matrix")
#UBCF
modelo_UBCF_ratings<- Recommender(getData(eval_scheme, "train"), "UBCF", param = NULL)
predicciones_rating3<- predict(modelo_UBCF_ratings,getData(eval_scheme, "known"), type = "ratings")
prediccion_rating_matriz3<- as(predicciones_rating3, "matrix")
#IBCF
modelo_IBCF_ratings<- Recommender(getData(eval_scheme, "train"), "IBCF", param = NULL)
predicciones_rating4<- predict(modelo_IBCF_ratings, getData(eval_scheme, "known"), type = "ratings")
prediccion_rating_matriz4<- as(predicciones_rating4, "matrix")
#SVDF
modelo_SVDF_ratings<- Recommender(getData(eval_scheme, "train"), "SVDF", param = NULL)
if(!requireNamespace("recommenderlab", quietly = TRUE)) {
install.packages("recommenderlab")
}
if(!requireNamespace("rsparse", quietly = TRUE)) {
install.packages("rsparse")
}
if(!requireNamespace("Matrix", quietly = TRUE)) {
install.packages("Matrix")
}
if(!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#Cargar librerias necesarias
library(recommenderlab)
library(rsparse)
library(Matrix)
library(dplyr)
#1. Cargar datos
data<- readRDS("matriz.RDS")
objetivos<- readRDS("objetivos.RDS")
clientes_objetivo<- objetivos$objetivo2$obj
productos<- readRDS("maestroestr.RDS")
sum(data == 0)/(nrow(data) * ncol(data))
#2. Examinar datos y tipos de columnas
str(data)
summary(data)
class(data)
dim(data)
str(clientes_objetivo)
summary(clientes_objetivo)
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
#4. Entrenar modelo ALS
set.seed(7)
modelo_ALS<- WRMF$new(rank = 10L, lambda = 0.1, feedback = "implicit")
modelo_ALS$fit_transform(matriz_sparse)
#5. Obtener el índice (en que fila estan) de los clientes objetivo en la matriz
id_usuarios<- match(clientes_objetivo, rownames(matriz))
#6. Hacer predicciones de productos
predicciones<- modelo_ALS$predict(matriz_sparse[id_usuarios, , drop = FALSE], k = 1)
productos_recomendados<- colnames(matriz)[predicciones]
#Resultado
resultado<- data.frame(cliente = clientes_objetivo,
producto_recomendado = productos_recomendados)
#Asignar el nombre del producto
resultado$producto_recomendado<- sub("^X", "", resultado$producto_recomendado)
resultado_final<- merge(resultado,
productos,
by.x = "producto_recomendado",
by.y = "cod_est",
all.x = TRUE)
resultado_final<- resultado_final[, c("cliente", "producto_recomendado", "descripcion")]
resultado_final
matriz_sparseB<- ifelse(matriz_sparse > 0, 1, 0)
#1. Cargar datos
data<- readRDS("matriz.RDS")
objetivos<- readRDS("objetivos.RDS")
clientes_objetivo<- objetivos$objetivo2$obj
productos<- readRDS("maestroestr.RDS")
sum(data == 0)/(nrow(data) * ncol(data))
#2. Examinar datos y tipos de columnas
str(data)
summary(data)
class(data)
dim(data)
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
sum(data == 0)/(nrow(data) * ncol(data))
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
matriz_sparseB<- ifelse(matriz_sparse > 0, 1, 0)
#4. Entrenar modelo ALS
set.seed(7)
modelo_ALS<- WRMF$new(rank = 10L, lambda = 0.1, feedback = "implicit")
modelo_ALS$fit_transform(matriz_sparseB)
#5. Obtener el índice (en que fila estan) de los clientes objetivo en la matriz
id_usuarios<- match(clientes_objetivo, rownames(matriz))
#1. Cargar datos
data<- readRDS("matriz.RDS")
objetivos<- readRDS("objetivos.RDS")
clientes_objetivo<- objetivos$objetivo2$obj
productos<- readRDS("maestroestr.RDS")
#2. Examinar datos y tipos de columnas
str(data)
summary(data)
class(data)
dim(data)
str(clientes_objetivo)
summary(clientes_objetivo)
sum(data == 0)/(nrow(data) * ncol(data))
#Reemplazar NA con 0 (porque sparseMatrix no admite NA)
matriz<- replace(data, is.na(data), 0)
#Convierte a matriz sparseMatrix
matriz_sparse<- as(as.matrix(matriz), "sparseMatrix")
View(matriz)
matriz_sparse@x[matriz_sparse@x>=1]<-1
View(matriz_sparse)
matriz_sparse
matriz_sparseB<- ifelse(matriz_sparse > 0, 1, 0)
matriz_sparseB
