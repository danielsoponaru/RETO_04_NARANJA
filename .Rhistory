obj4 <- objetivos[[4]]$obj
# Filtrar tickets de clientes objetivo
tickets_filtrados <- tickets %>% filter(id_cliente_enc %in% obj4)
# Convertir fecha
tickets_filtrados <- tickets_filtrados %>% mutate(fecha = ymd(dia))
# Últimos tickets (última compra)
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# Historial excluyendo la última compra
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# Crear matriz de interacciones usuario-producto (conteo)
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
tickets_matriz_agrupado
# Pivotar a matriz wide
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = cod_est,
values_from = N_compras,
values_fill = 0,
names_prefix = "id_"
)
df_matriz
# Crear matriz sparse
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
# Entrenar modelo WRMF
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, alpha = 40, feedback = "implicit")
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# Predecir por cliente excluyendo productos de la última compra
codigos_columnas <- str_remove(colnames(matriz_sparse_o4), "id_")
colnames(matriz_sparse_o4) <- paste0("id_", colnames(matriz_sparse_o4))
recomendaciones_list <- vector("list", length = nrow(matriz_sparse_o4))
codigos_columnas <- str_remove(colnames(matriz_sparse_o4), "id_")
for (i in seq_len(nrow(matriz_sparse_o4))) {
cliente <- rownames(matriz_sparse_o4)[i]
# Productos de la última compra para excluir
productos_excluir <- ultimos_tickets %>%
filter(id_cliente_enc == cliente) %>%
pull(cod_est)
productos_excluir_idx <- which(codigos_columnas %in% productos_excluir)
# Scores para todos los productos para cliente i
scores <- modelo_wrmf_o4$predict(user_index = i, item_index = seq_len(ncol(matriz_sparse_o4)))
# Excluir productos ya comprados
if(length(productos_excluir_idx) > 0) {
scores[productos_excluir_idx] <- -Inf
}
mejor_idx <- which.max(scores)
producto_recomendado <- codigos_columnas[mejor_idx]
recomendaciones_list[[i]] <- data.frame(
id_cliente_enc = cliente,
cod_est = producto_recomendado,
stringsAsFactors = FALSE
)
}
# 1. Librerías necesarias
library(data.table)
library(Matrix)
library(recosystem)
# 2. Cargar los datos
maestroestr <- readRDS("maestroestr.RDS")      # Datos maestros de clientes
objetivos   <- readRDS("objetivos.RDS")        # Lista con objetivos, incluyendo objetivo4$obj
tickets_enc <- readRDS("tickets_enc.RDS")      # Historial de tickets
# 3. Revisar nombres de columnas y renombrar si hace falta
# Imprimir nombres para verificar:
print(names(tickets_enc))
# 4. Extraer clientes del Objetivo 4
clientes_obj4 <- objetivos$objetivo4$obj       # Vector con IDs de cliente
# 5. Identificar la última compra de cada cliente del Objetivo 4
tickets_obj4  <- tickets_enc[id_cli %in% clientes_obj4]
ultima_compra <- tickets_obj4[order(id_cli, -fecha_compra), .SD[1], by = id_cli]
# -----------------------------------------
# CARGA DE LIBRERÍAS Y DATOS
# -----------------------------------------
library(tidyverse)
library(lubridate)
library(rsparse)
# Cargar datos necesarios
maestro <- readRDS("Datos/originales/maestroestr.RDS")
objetivos <- readRDS("Datos/originales/objetivos.RDS")
tickets <- readRDS("Datos/originales/tickets_enc.RDS")
# Cargar datos necesarios
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
# -----------------------------------------
# FILTRADO DE CLIENTES DEL OBJETIVO 4
# -----------------------------------------
obj4 <- objetivos[[4]]$obj  # Lista de clientes objetivo 4
# Filtrar tickets solo de esos clientes
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4)
# -----------------------------------------
# IDENTIFICAR ÚLTIMA COMPRA Y SEPARAR HISTORIAL
# -----------------------------------------
# Convertir campo de fecha a tipo Date
tickets_filtrados <- tickets_filtrados %>%
mutate(fecha = ymd(dia))
# Obtener último ticket por cliente
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# Historial de tickets (sin la última compra)
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# -----------------------------------------
# CREAR MATRIZ CLIENTE x PRODUCTO
# -----------------------------------------
# Agrupar historial por cliente y producto
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
# Convertir a formato ancho (clientes = filas, productos = columnas)
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
df_matriz
View(df_matriz)
# Crear matriz dispersa (sparse)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
# -----------------------------------------
# ENTRENAMIENTO DEL MODELO WRMF
# -----------------------------------------
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
# Entrenamiento del modelo (1000 iteraciones)
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# -----------------------------------------
# GENERACIÓN DE RECOMENDACIONES
# -----------------------------------------
# Predecir el producto más recomendado (k = 1)
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
# Obtener IDs de cliente y producto recomendado
clientes <- rownames(matriz_sparse_o4)
clientes
productos_predichos <- attr(preds_o4, "ids")
productos_predichos
# Formar tabla de recomendaciones
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
producto_olvidado = productos_predichos
)
recomendaciones_o4
# -----------------------------------------
# MOSTRAR RESULTADO FINAL
# -----------------------------------------
print(recomendaciones_o4)
View(recomendaciones_o4)
maestro
View(maestro)
# -----------------------------------------
# CARGA DE LIBRERÍAS Y DATOS
# -----------------------------------------
library(tidyverse)
library(lubridate)
library(rsparse)
# Cargar datos
maestro <- readRDS("Datos/originales/maestroestr.RDS")
objetivos <- readRDS("Datos/originales/objetivos.RDS")
tickets <- readRDS("Datos/originales/tickets_enc.RDS")
# Cargar datos
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
# -----------------------------------------
# FILTRADO DE CLIENTES DEL OBJETIVO 4
# -----------------------------------------
obj4 <- objetivos[[4]]$obj  # IDs de los clientes objetivo
# Filtrar los tickets de esos clientes
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))  # convertir fecha
# -----------------------------------------
# SEPARACIÓN DEL HISTORIAL Y ÚLTIMA COMPRA
# -----------------------------------------
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# -----------------------------------------
# MATRIZ CLIENTE - PRODUCTO
# -----------------------------------------
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
# Formato ancho sin añadir prefijo "id_"
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = cod_est,
values_from = N_compras,
values_fill = 0
)
# Crear matriz dispersa
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
colnames(matriz_sparse_o4) <- colnames(df_matriz)[-1]  # mantener cod_est como nombres de columna
# -----------------------------------------
# ENTRENAR MODELO WRMF
# -----------------------------------------
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# -----------------------------------------
# GENERAR RECOMENDACIONES
# -----------------------------------------
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
cod_est = productos_predichos
)
# -----------------------------------------
# UNIR CON MAESTRO PARA DESCRIPCIÓN
# -----------------------------------------
recomendaciones_o4 <- recomendaciones_o4 %>%
left_join(maestro %>% select(cod_est, descripcion), by = "cod_est")
# -----------------------------------------
# MOSTRAR RESULTADO FINAL
# -----------------------------------------
print(recomendaciones_o4)
# -----------------------------------------
# CARGA DE LIBRERÍAS Y DATOS
# -----------------------------------------
library(tidyverse)
library(lubridate)
library(rsparse)
# Cargar datos
maestro <- readRDS("Datos/originales/maestroestr.RDS")
# -----------------------------------------
# CARGA DE LIBRERÍAS Y DATOS
# -----------------------------------------
library(tidyverse)
library(lubridate)
library(rsparse)
# Cargar datos
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
# -----------------------------------------
# FILTRADO DE CLIENTES DEL OBJETIVO 4
# -----------------------------------------
obj4 <- objetivos[[4]]$obj
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))
# -----------------------------------------
# IDENTIFICAR LA ÚLTIMA COMPRA POR CLIENTE
# -----------------------------------------
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# -----------------------------------------
# MATRIZ CLIENTE - PRODUCTO (sin última compra)
# -----------------------------------------
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = cod_est,
values_from = N_compras,
values_fill = 0
)
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
colnames(matriz_sparse_o4) <- colnames(df_matriz)[-1]
# -----------------------------------------
# ENTRENAR MODELO WRMF
# -----------------------------------------
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# -----------------------------------------
# "NOT RECOMMEND": Excluir productos de última compra
# -----------------------------------------
not_recommend_list <- ultimos_tickets %>%
group_by(id_cliente_enc) %>%
summarise(not_recommend = list(unique(cod_est))) %>%
deframe()
# Recomendar con exclusión personalizada por cliente
preds_o4 <- modelo_wrmf_o4$predict(
matriz_sparse_o4,
k = 1,
not_recommend = not_recommend_list
)
# -----------------------------------------
# "NOT RECOMMEND": Excluir productos de última compra
# -----------------------------------------
not_recommend_list <- ultimos_tickets %>%
group_by(id_cliente_enc) %>%
summarise(not_recommend = list(unique(cod_est))) %>%
deframe()
# Recomendar con exclusión personalizada por cliente
preds_o4 <- modelo_wrmf_o4$predict(
matriz_sparse_o4,
k = 1,
not_recommend = not_recommend_list
)
library(tidyverse)
library(lubridate)
library(rsparse)
# Cargar datos
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
# -----------------------------------------
# FILTRADO DE CLIENTES DEL OBJETIVO 4
# -----------------------------------------
obj4 <- objetivos[[4]]$obj  # IDs de los clientes objetivo
# Filtrar los tickets de esos clientes
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))  # convertir fecha
# -----------------------------------------
# SEPARACIÓN DEL HISTORIAL Y ÚLTIMA COMPRA
# -----------------------------------------
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# -----------------------------------------
# MATRIZ CLIENTE - PRODUCTO
# -----------------------------------------
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
# Formato ancho sin añadir prefijo "id_"
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = cod_est,
values_from = N_compras,
values_fill = 0
)
# Crear matriz dispersa
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
colnames(matriz_sparse_o4) <- colnames(df_matriz)[-1]  # mantener cod_est como nombres de columna
# -----------------------------------------
# ENTRENAR MODELO WRMF
# -----------------------------------------
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# -----------------------------------------
# GENERAR RECOMENDACIONES
# -----------------------------------------
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
cod_est = productos_predichos
)
# -----------------------------------------
# UNIR CON MAESTRO PARA DESCRIPCIÓN
# -----------------------------------------
recomendaciones_o4 <- recomendaciones_o4 %>%
left_join(maestro %>% select(cod_est, descripcion), by = "cod_est")
# -----------------------------------------
# MOSTRAR RESULTADO FINAL
# -----------------------------------------
print(recomendaciones_o4)
# -----------------------------------------
# CARGA DE LIBRERÍAS Y DATOS
# -----------------------------------------
library(tidyverse)
library(lubridate)
library(rsparse)
# Cargar datos
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
# -----------------------------------------
# FILTRADO DE CLIENTES DEL OBJETIVO 4
# -----------------------------------------
obj4 <- objetivos[[4]]$obj  # IDs de los clientes objetivo
# Filtrar los tickets de esos clientes
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))  # convertir fecha
# -----------------------------------------
# SEPARACIÓN DEL HISTORIAL Y ÚLTIMA COMPRA
# -----------------------------------------
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# -----------------------------------------
# MATRIZ CLIENTE - PRODUCTO
# -----------------------------------------
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
# Formato ancho sin añadir prefijo "id_"
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = cod_est,
values_from = N_compras,
values_fill = 0
)
# Crear matriz dispersa
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
colnames(matriz_sparse_o4) <- colnames(df_matriz)[-1]  # mantener cod_est como nombres de columna
# -----------------------------------------
# ENTRENAR MODELO WRMF
# -----------------------------------------
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# -----------------------------------------
# GENERAR RECOMENDACIONES
# -----------------------------------------
preds_o4 <- modelo_wrmf_o4$predict(matriz_sparse_o4, k = 1)
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids")
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
cod_est = productos_predichos
)
# -----------------------------------------
# UNIR CON MAESTRO PARA DESCRIPCIÓN
# -----------------------------------------
recomendaciones_o4 <- recomendaciones_o4 %>%
left_join(maestro %>% select(cod_est, descripcion), by = "cod_est")
# -----------------------------------------
# MOSTRAR RESULTADO FINAL
# -----------------------------------------
print(recomendaciones_o4)
matriz <- readRDS("matriz.RDS")
dim(matriz)
View(matriz)
View(matriz)
View(matriz)
# Cargar librerías
library(tidyverse)
library(lubridate)
library(rsparse)
# 1. Cargar datos
maestro <- readRDS("maestroestr.RDS")
objetivos <- readRDS("objetivos.RDS")
tickets <- readRDS("tickets_enc.RDS")
# 2. Obtener los clientes del objetivo 4
obj4 <- objetivos[[4]]$obj
# 3. Filtrar solo tickets de los clientes objetivo
tickets_filtrados <- tickets %>%
filter(id_cliente_enc %in% obj4) %>%
mutate(fecha = ymd(dia))
# 4. Obtener última compra por cliente
ultimos_tickets <- tickets_filtrados %>%
group_by(id_cliente_enc) %>%
filter(fecha == max(fecha)) %>%
ungroup()
# 5. Historial anterior (para entrenamiento)
historial_tickets <- anti_join(tickets_filtrados, ultimos_tickets, by = "num_ticket")
# 6. Agrupar historial para crear la matriz
tickets_matriz_agrupado <- historial_tickets %>%
group_by(id_cliente_enc, cod_est) %>%
summarise(N_compras = n(), .groups = "drop")
# 7. Crear matriz de cliente-producto
df_matriz <- pivot_wider(
tickets_matriz_agrupado,
names_from = "cod_est",
values_from = "N_compras",
values_fill = 0,
names_prefix = "id_"
)
# 8. Convertir a sparseMatrix
matriz_sparse_o4 <- as(as.matrix(df_matriz[,-1]), "dgCMatrix")
rownames(matriz_sparse_o4) <- df_matriz$id_cliente_enc
# 9. ENTRENAMIENTO CON WRMF
modelo_wrmf_o4 <- WRMF$new(rank = 10L, lambda = 0.1, feedback = 'implicit')
modelo_wrmf_o4$fit_transform(matriz_sparse_o4, n_iter = 1000L, convergence_tol = 1e-6)
# 10. Crear matriz de productos NO recomendables (última compra)
ultimos_tickets_bin <- ultimos_tickets %>%
mutate(cod_est = paste0("id_", cod_est)) %>%
mutate(valor = 1) %>%
pivot_wider(names_from = cod_est, values_from = valor, values_fill = 0) %>%
column_to_rownames("id_cliente_enc")
# 11. Asegurar que tenga mismas columnas y orden que matriz_sparse_o4
columnas_faltantes <- setdiff(colnames(matriz_sparse_o4), colnames(ultimos_tickets_bin))
ultimos_tickets_bin[, columnas_faltantes] <- 0
ultimos_tickets_bin <- ultimos_tickets_bin[, colnames(matriz_sparse_o4)]
# 12. Convertir a matriz sparse para `not_recommend`
not_recommend_matrix <- as(as.matrix(ultimos_tickets_bin), "dgCMatrix")
# 13. Predecir recomendaciones (evitando últimos productos comprados)
preds_o4 <- modelo_wrmf_o4$predict(
matriz_sparse_o4,
k = 1,
not_recommend = not_recommend_matrix
)
# 14. Preparar output
clientes <- rownames(matriz_sparse_o4)
productos_predichos <- attr(preds_o4, "ids") %>% str_remove("id_")
# 15. Armar tabla final con descripciones
recomendaciones_o4 <- data.frame(
id_cliente_enc = clientes,
cod_est = productos_predichos
) %>%
left_join(maestro %>% select(cod_est, descripcion), by = "cod_est") %>%
select(id_cliente_enc, cod_est, descripcion)
# 16. Ver resultado
print(recomendaciones_o4)
